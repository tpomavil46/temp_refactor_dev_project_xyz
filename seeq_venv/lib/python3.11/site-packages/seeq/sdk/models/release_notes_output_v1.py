# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.10.0-v202502060217-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ReleaseNotesOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_release_notes': 'list[IssueSummaryOutputV1]',
        'next_upgrade_time': 'str',
        'next_version': 'str',
        'past_release_notes': 'list[IssueSummaryOutputV1]',
        'upcoming_release_notes': 'list[IssueSummaryOutputV1]'
    }

    attribute_map = {
        'current_release_notes': 'currentReleaseNotes',
        'next_upgrade_time': 'nextUpgradeTime',
        'next_version': 'nextVersion',
        'past_release_notes': 'pastReleaseNotes',
        'upcoming_release_notes': 'upcomingReleaseNotes'
    }

    def __init__(self, current_release_notes=None, next_upgrade_time=None, next_version=None, past_release_notes=None, upcoming_release_notes=None):
        """
        ReleaseNotesOutputV1 - a model defined in Swagger
        """

        self._current_release_notes = None
        self._next_upgrade_time = None
        self._next_version = None
        self._past_release_notes = None
        self._upcoming_release_notes = None

        if current_release_notes is not None:
          self.current_release_notes = current_release_notes
        if next_upgrade_time is not None:
          self.next_upgrade_time = next_upgrade_time
        if next_version is not None:
          self.next_version = next_version
        if past_release_notes is not None:
          self.past_release_notes = past_release_notes
        if upcoming_release_notes is not None:
          self.upcoming_release_notes = upcoming_release_notes

    @property
    def current_release_notes(self):
        """
        Gets the current_release_notes of this ReleaseNotesOutputV1.
        The release notes for the current version

        :return: The current_release_notes of this ReleaseNotesOutputV1.
        :rtype: list[IssueSummaryOutputV1]
        """
        return self._current_release_notes

    @current_release_notes.setter
    def current_release_notes(self, current_release_notes):
        """
        Sets the current_release_notes of this ReleaseNotesOutputV1.
        The release notes for the current version

        :param current_release_notes: The current_release_notes of this ReleaseNotesOutputV1.
        :type: list[IssueSummaryOutputV1]
        """
        if current_release_notes is None:
            raise ValueError("Invalid value for `current_release_notes`, must not be `None`")

        self._current_release_notes = current_release_notes

    @property
    def next_upgrade_time(self):
        """
        Gets the next_upgrade_time of this ReleaseNotesOutputV1.
        The date of the next planned upgrade time, as an ISO-8601 timestamp. May be empty if the server is not on a continuous deployment schedule

        :return: The next_upgrade_time of this ReleaseNotesOutputV1.
        :rtype: str
        """
        return self._next_upgrade_time

    @next_upgrade_time.setter
    def next_upgrade_time(self, next_upgrade_time):
        """
        Sets the next_upgrade_time of this ReleaseNotesOutputV1.
        The date of the next planned upgrade time, as an ISO-8601 timestamp. May be empty if the server is not on a continuous deployment schedule

        :param next_upgrade_time: The next_upgrade_time of this ReleaseNotesOutputV1.
        :type: str
        """

        self._next_upgrade_time = next_upgrade_time

    @property
    def next_version(self):
        """
        Gets the next_version of this ReleaseNotesOutputV1.
        The version that will be installed during the next planned upgrade time. May be empty if the server is not on a continuous deployment schedule

        :return: The next_version of this ReleaseNotesOutputV1.
        :rtype: str
        """
        return self._next_version

    @next_version.setter
    def next_version(self, next_version):
        """
        Sets the next_version of this ReleaseNotesOutputV1.
        The version that will be installed during the next planned upgrade time. May be empty if the server is not on a continuous deployment schedule

        :param next_version: The next_version of this ReleaseNotesOutputV1.
        :type: str
        """

        self._next_version = next_version

    @property
    def past_release_notes(self):
        """
        Gets the past_release_notes of this ReleaseNotesOutputV1.
        The release notes for recently installed versions

        :return: The past_release_notes of this ReleaseNotesOutputV1.
        :rtype: list[IssueSummaryOutputV1]
        """
        return self._past_release_notes

    @past_release_notes.setter
    def past_release_notes(self, past_release_notes):
        """
        Sets the past_release_notes of this ReleaseNotesOutputV1.
        The release notes for recently installed versions

        :param past_release_notes: The past_release_notes of this ReleaseNotesOutputV1.
        :type: list[IssueSummaryOutputV1]
        """
        if past_release_notes is None:
            raise ValueError("Invalid value for `past_release_notes`, must not be `None`")

        self._past_release_notes = past_release_notes

    @property
    def upcoming_release_notes(self):
        """
        Gets the upcoming_release_notes of this ReleaseNotesOutputV1.
        The release notes for the version that will be installed next

        :return: The upcoming_release_notes of this ReleaseNotesOutputV1.
        :rtype: list[IssueSummaryOutputV1]
        """
        return self._upcoming_release_notes

    @upcoming_release_notes.setter
    def upcoming_release_notes(self, upcoming_release_notes):
        """
        Sets the upcoming_release_notes of this ReleaseNotesOutputV1.
        The release notes for the version that will be installed next

        :param upcoming_release_notes: The upcoming_release_notes of this ReleaseNotesOutputV1.
        :type: list[IssueSummaryOutputV1]
        """
        if upcoming_release_notes is None:
            raise ValueError("Invalid value for `upcoming_release_notes`, must not be `None`")

        self._upcoming_release_notes = upcoming_release_notes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReleaseNotesOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
