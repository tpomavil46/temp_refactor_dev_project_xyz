# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.10.0-v202502060217-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ListConfigFieldV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'element_type': 'str',
        'max_item_count': 'int',
        'min_item_count': 'int'
    }

    attribute_map = {
        'element_type': 'elementType',
        'max_item_count': 'maxItemCount',
        'min_item_count': 'minItemCount'
    }

    def __init__(self, element_type=None, max_item_count=None, min_item_count=None):
        """
        ListConfigFieldV1 - a model defined in Swagger
        """

        self._element_type = None
        self._max_item_count = None
        self._min_item_count = None

        if element_type is not None:
          self.element_type = element_type
        if max_item_count is not None:
          self.max_item_count = max_item_count
        if min_item_count is not None:
          self.min_item_count = min_item_count

    @property
    def element_type(self):
        """
        Gets the element_type of this ListConfigFieldV1.
        The type of elements in the list

        :return: The element_type of this ListConfigFieldV1.
        :rtype: str
        """
        return self._element_type

    @element_type.setter
    def element_type(self, element_type):
        """
        Sets the element_type of this ListConfigFieldV1.
        The type of elements in the list

        :param element_type: The element_type of this ListConfigFieldV1.
        :type: str
        """
        allowed_values = ["STRING", "BOOLEAN", "ANY", "COMPLEX_OBJECT", "INTEGER", "FRACTIONAL"]
        if element_type not in allowed_values:
            raise ValueError(
                "Invalid value for `element_type` ({0}), must be one of {1}"
                .format(element_type, allowed_values)
            )

        self._element_type = element_type

    @property
    def max_item_count(self):
        """
        Gets the max_item_count of this ListConfigFieldV1.
        The maximum number of items in the list

        :return: The max_item_count of this ListConfigFieldV1.
        :rtype: int
        """
        return self._max_item_count

    @max_item_count.setter
    def max_item_count(self, max_item_count):
        """
        Sets the max_item_count of this ListConfigFieldV1.
        The maximum number of items in the list

        :param max_item_count: The max_item_count of this ListConfigFieldV1.
        :type: int
        """

        self._max_item_count = max_item_count

    @property
    def min_item_count(self):
        """
        Gets the min_item_count of this ListConfigFieldV1.
        The minimum number of items in the list

        :return: The min_item_count of this ListConfigFieldV1.
        :rtype: int
        """
        return self._min_item_count

    @min_item_count.setter
    def min_item_count(self, min_item_count):
        """
        Sets the min_item_count of this ListConfigFieldV1.
        The minimum number of items in the list

        :param min_item_count: The min_item_count of this ListConfigFieldV1.
        :type: int
        """

        self._min_item_count = min_item_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ListConfigFieldV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
