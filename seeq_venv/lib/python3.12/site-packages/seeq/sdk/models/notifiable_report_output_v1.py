# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class NotifiableReportOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contextual_text': 'str',
        'created_at': 'str',
        'enabled': 'bool',
        'id': 'str',
        'name': 'str',
        'owner': 'IdentityPreviewV1',
        'owner_id': 'str'
    }

    attribute_map = {
        'contextual_text': 'contextualText',
        'created_at': 'createdAt',
        'enabled': 'enabled',
        'id': 'id',
        'name': 'name',
        'owner': 'owner',
        'owner_id': 'ownerId'
    }

    def __init__(self, contextual_text=None, created_at=None, enabled=None, id=None, name=None, owner=None, owner_id=None):
        """
        NotifiableReportOutputV1 - a model defined in Swagger
        """

        self._contextual_text = None
        self._created_at = None
        self._enabled = None
        self._id = None
        self._name = None
        self._owner = None
        self._owner_id = None

        if contextual_text is not None:
          self.contextual_text = contextual_text
        if created_at is not None:
          self.created_at = created_at
        if enabled is not None:
          self.enabled = enabled
        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if owner is not None:
          self.owner = owner
        if owner_id is not None:
          self.owner_id = owner_id

    @property
    def contextual_text(self):
        """
        Gets the contextual_text of this NotifiableReportOutputV1.
        Additional context about the notifications

        :return: The contextual_text of this NotifiableReportOutputV1.
        :rtype: str
        """
        return self._contextual_text

    @contextual_text.setter
    def contextual_text(self, contextual_text):
        """
        Sets the contextual_text of this NotifiableReportOutputV1.
        Additional context about the notifications

        :param contextual_text: The contextual_text of this NotifiableReportOutputV1.
        :type: str
        """

        self._contextual_text = contextual_text

    @property
    def created_at(self):
        """
        Gets the created_at of this NotifiableReportOutputV1.
        The time the report was created

        :return: The created_at of this NotifiableReportOutputV1.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this NotifiableReportOutputV1.
        The time the report was created

        :param created_at: The created_at of this NotifiableReportOutputV1.
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def enabled(self):
        """
        Gets the enabled of this NotifiableReportOutputV1.
        Whether this report is enabled or not

        :return: The enabled of this NotifiableReportOutputV1.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this NotifiableReportOutputV1.
        Whether this report is enabled or not

        :param enabled: The enabled of this NotifiableReportOutputV1.
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def id(self):
        """
        Gets the id of this NotifiableReportOutputV1.
        ID of the report

        :return: The id of this NotifiableReportOutputV1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this NotifiableReportOutputV1.
        ID of the report

        :param id: The id of this NotifiableReportOutputV1.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this NotifiableReportOutputV1.
        Name of the Organizer topic and document name associated with the report

        :return: The name of this NotifiableReportOutputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this NotifiableReportOutputV1.
        Name of the Organizer topic and document name associated with the report

        :param name: The name of this NotifiableReportOutputV1.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def owner(self):
        """
        Gets the owner of this NotifiableReportOutputV1.

        :return: The owner of this NotifiableReportOutputV1.
        :rtype: IdentityPreviewV1
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this NotifiableReportOutputV1.

        :param owner: The owner of this NotifiableReportOutputV1.
        :type: IdentityPreviewV1
        """

        self._owner = owner

    @property
    def owner_id(self):
        """
        Gets the owner_id of this NotifiableReportOutputV1.
        ID of the report's owner

        :return: The owner_id of this NotifiableReportOutputV1.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """
        Sets the owner_id of this NotifiableReportOutputV1.
        ID of the report's owner

        :param owner_id: The owner_id of this NotifiableReportOutputV1.
        :type: str
        """

        self._owner_id = owner_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NotifiableReportOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
