# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class SentEmailAttachmentOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'str',
        'content_type': 'str',
        'filename': 'str'
    }

    attribute_map = {
        'content': 'content',
        'content_type': 'contentType',
        'filename': 'filename'
    }

    def __init__(self, content=None, content_type=None, filename=None):
        """
        SentEmailAttachmentOutputV1 - a model defined in Swagger
        """

        self._content = None
        self._content_type = None
        self._filename = None

        if content is not None:
          self.content = content
        if content_type is not None:
          self.content_type = content_type
        if filename is not None:
          self.filename = filename

    @property
    def content(self):
        """
        Gets the content of this SentEmailAttachmentOutputV1.
        The content of the attachment, encoded as Base64

        :return: The content of this SentEmailAttachmentOutputV1.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this SentEmailAttachmentOutputV1.
        The content of the attachment, encoded as Base64

        :param content: The content of this SentEmailAttachmentOutputV1.
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def content_type(self):
        """
        Gets the content_type of this SentEmailAttachmentOutputV1.
        The content type of the attachment

        :return: The content_type of this SentEmailAttachmentOutputV1.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """
        Sets the content_type of this SentEmailAttachmentOutputV1.
        The content type of the attachment

        :param content_type: The content_type of this SentEmailAttachmentOutputV1.
        :type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def filename(self):
        """
        Gets the filename of this SentEmailAttachmentOutputV1.
        The filename of the attachment

        :return: The filename of this SentEmailAttachmentOutputV1.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """
        Sets the filename of this SentEmailAttachmentOutputV1.
        The filename of the attachment

        :param filename: The filename of this SentEmailAttachmentOutputV1.
        :type: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")

        self._filename = filename

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SentEmailAttachmentOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
