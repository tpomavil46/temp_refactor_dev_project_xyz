# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class WorksheetInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'branch_from': 'str',
        'clone_name_prefix': 'str',
        'clone_name_suffix': 'str',
        'item_ids_to_clone': 'list[str]',
        'name': 'str'
    }

    attribute_map = {
        'branch_from': 'branchFrom',
        'clone_name_prefix': 'cloneNamePrefix',
        'clone_name_suffix': 'cloneNameSuffix',
        'item_ids_to_clone': 'itemIdsToClone',
        'name': 'name'
    }

    def __init__(self, branch_from=None, clone_name_prefix=None, clone_name_suffix=None, item_ids_to_clone=None, name=None):
        """
        WorksheetInputV1 - a model defined in Swagger
        """

        self._branch_from = None
        self._clone_name_prefix = None
        self._clone_name_suffix = None
        self._item_ids_to_clone = None
        self._name = None

        if branch_from is not None:
          self.branch_from = branch_from
        if clone_name_prefix is not None:
          self.clone_name_prefix = clone_name_prefix
        if clone_name_suffix is not None:
          self.clone_name_suffix = clone_name_suffix
        if item_ids_to_clone is not None:
          self.item_ids_to_clone = item_ids_to_clone
        if name is not None:
          self.name = name

    @property
    def branch_from(self):
        """
        Gets the branch_from of this WorksheetInputV1.
        Create a new worksheet by duplicating the contents and history of the worksheet with the specified ID. When null, no branching will occur; resulting worksheet will be blank.

        :return: The branch_from of this WorksheetInputV1.
        :rtype: str
        """
        return self._branch_from

    @branch_from.setter
    def branch_from(self, branch_from):
        """
        Sets the branch_from of this WorksheetInputV1.
        Create a new worksheet by duplicating the contents and history of the worksheet with the specified ID. When null, no branching will occur; resulting worksheet will be blank.

        :param branch_from: The branch_from of this WorksheetInputV1.
        :type: str
        """

        self._branch_from = branch_from

    @property
    def clone_name_prefix(self):
        """
        Gets the clone_name_prefix of this WorksheetInputV1.

        :return: The clone_name_prefix of this WorksheetInputV1.
        :rtype: str
        """
        return self._clone_name_prefix

    @clone_name_prefix.setter
    def clone_name_prefix(self, clone_name_prefix):
        """
        Sets the clone_name_prefix of this WorksheetInputV1.

        :param clone_name_prefix: The clone_name_prefix of this WorksheetInputV1.
        :type: str
        """

        self._clone_name_prefix = clone_name_prefix

    @property
    def clone_name_suffix(self):
        """
        Gets the clone_name_suffix of this WorksheetInputV1.

        :return: The clone_name_suffix of this WorksheetInputV1.
        :rtype: str
        """
        return self._clone_name_suffix

    @clone_name_suffix.setter
    def clone_name_suffix(self, clone_name_suffix):
        """
        Sets the clone_name_suffix of this WorksheetInputV1.

        :param clone_name_suffix: The clone_name_suffix of this WorksheetInputV1.
        :type: str
        """

        self._clone_name_suffix = clone_name_suffix

    @property
    def item_ids_to_clone(self):
        """
        Gets the item_ids_to_clone of this WorksheetInputV1.

        :return: The item_ids_to_clone of this WorksheetInputV1.
        :rtype: list[str]
        """
        return self._item_ids_to_clone

    @item_ids_to_clone.setter
    def item_ids_to_clone(self, item_ids_to_clone):
        """
        Sets the item_ids_to_clone of this WorksheetInputV1.

        :param item_ids_to_clone: The item_ids_to_clone of this WorksheetInputV1.
        :type: list[str]
        """

        self._item_ids_to_clone = item_ids_to_clone

    @property
    def name(self):
        """
        Gets the name of this WorksheetInputV1.
        Human readable name. Null or whitespace names are not permitted.

        :return: The name of this WorksheetInputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WorksheetInputV1.
        Human readable name. Null or whitespace names are not permitted.

        :param name: The name of this WorksheetInputV1.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorksheetInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
