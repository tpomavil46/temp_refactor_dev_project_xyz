# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class LockErrorOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'item': 'BaseOutput',
        'item_path': 'list[LockErrorPathOutputV1]'
    }

    attribute_map = {
        'id': 'id',
        'item': 'item',
        'item_path': 'itemPath'
    }

    def __init__(self, id=None, item=None, item_path=None):
        """
        LockErrorOutputV1 - a model defined in Swagger
        """

        self._id = None
        self._item = None
        self._item_path = None

        if id is not None:
          self.id = id
        if item is not None:
          self.item = item
        if item_path is not None:
          self.item_path = item_path

    @property
    def id(self):
        """
        Gets the id of this LockErrorOutputV1.
        The id of the item that could not be locked

        :return: The id of this LockErrorOutputV1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LockErrorOutputV1.
        The id of the item that could not be locked

        :param id: The id of this LockErrorOutputV1.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def item(self):
        """
        Gets the item of this LockErrorOutputV1.

        :return: The item of this LockErrorOutputV1.
        :rtype: BaseOutput
        """
        return self._item

    @item.setter
    def item(self, item):
        """
        Sets the item of this LockErrorOutputV1.

        :param item: The item of this LockErrorOutputV1.
        :type: BaseOutput
        """
        if item is None:
            raise ValueError("Invalid value for `item`, must not be `None`")

        self._item = item

    @property
    def item_path(self):
        """
        Gets the item_path of this LockErrorOutputV1.
        The ordered path of items that led to the error. For example, it could contain an Analysis, then a relationship saying the Analysis has a Worksheet, then said Worksheet, then a relationship saying this worksheet has a Signal in its Journal, and then the id field in this error would be said Signal.

        :return: The item_path of this LockErrorOutputV1.
        :rtype: list[LockErrorPathOutputV1]
        """
        return self._item_path

    @item_path.setter
    def item_path(self, item_path):
        """
        Sets the item_path of this LockErrorOutputV1.
        The ordered path of items that led to the error. For example, it could contain an Analysis, then a relationship saying the Analysis has a Worksheet, then said Worksheet, then a relationship saying this worksheet has a Signal in its Journal, and then the id field in this error would be said Signal.

        :param item_path: The item_path of this LockErrorOutputV1.
        :type: list[LockErrorPathOutputV1]
        """

        self._item_path = item_path

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LockErrorOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
