# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class JiraAttachment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'object',
        'filename': 'str',
        'media_type': 'JiraAttachmentMediaType'
    }

    attribute_map = {
        'content': 'content',
        'filename': 'filename',
        'media_type': 'mediaType'
    }

    def __init__(self, content=None, filename=None, media_type=None):
        """
        JiraAttachment - a model defined in Swagger
        """

        self._content = None
        self._filename = None
        self._media_type = None

        if content is not None:
          self.content = content
        if filename is not None:
          self.filename = filename
        if media_type is not None:
          self.media_type = media_type

    @property
    def content(self):
        """
        Gets the content of this JiraAttachment.

        :return: The content of this JiraAttachment.
        :rtype: object
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this JiraAttachment.

        :param content: The content of this JiraAttachment.
        :type: object
        """

        self._content = content

    @property
    def filename(self):
        """
        Gets the filename of this JiraAttachment.

        :return: The filename of this JiraAttachment.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """
        Sets the filename of this JiraAttachment.

        :param filename: The filename of this JiraAttachment.
        :type: str
        """

        self._filename = filename

    @property
    def media_type(self):
        """
        Gets the media_type of this JiraAttachment.

        :return: The media_type of this JiraAttachment.
        :rtype: JiraAttachmentMediaType
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """
        Sets the media_type of this JiraAttachment.

        :param media_type: The media_type of this JiraAttachment.
        :type: JiraAttachmentMediaType
        """

        self._media_type = media_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, JiraAttachment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
