# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class SubscriptionOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identity_id': 'str',
        'parameters': 'dict(str, str)',
        'session_id': 'str'
    }

    attribute_map = {
        'identity_id': 'identityId',
        'parameters': 'parameters',
        'session_id': 'sessionId'
    }

    def __init__(self, identity_id=None, parameters=None, session_id=None):
        """
        SubscriptionOutputV1 - a model defined in Swagger
        """

        self._identity_id = None
        self._parameters = None
        self._session_id = None

        if identity_id is not None:
          self.identity_id = identity_id
        if parameters is not None:
          self.parameters = parameters
        if session_id is not None:
          self.session_id = session_id

    @property
    def identity_id(self):
        """
        Gets the identity_id of this SubscriptionOutputV1.
        The identity ID associated with the subscription

        :return: The identity_id of this SubscriptionOutputV1.
        :rtype: str
        """
        return self._identity_id

    @identity_id.setter
    def identity_id(self, identity_id):
        """
        Sets the identity_id of this SubscriptionOutputV1.
        The identity ID associated with the subscription

        :param identity_id: The identity_id of this SubscriptionOutputV1.
        :type: str
        """

        self._identity_id = identity_id

    @property
    def parameters(self):
        """
        Gets the parameters of this SubscriptionOutputV1.
        The parameters associated with the subscription

        :return: The parameters of this SubscriptionOutputV1.
        :rtype: dict(str, str)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this SubscriptionOutputV1.
        The parameters associated with the subscription

        :param parameters: The parameters of this SubscriptionOutputV1.
        :type: dict(str, str)
        """

        self._parameters = parameters

    @property
    def session_id(self):
        """
        Gets the session_id of this SubscriptionOutputV1.
        The session ID that identifies this subscription

        :return: The session_id of this SubscriptionOutputV1.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """
        Sets the session_id of this SubscriptionOutputV1.
        The session ID that identifies this subscription

        :param session_id: The session_id of this SubscriptionOutputV1.
        :type: str
        """

        self._session_id = session_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SubscriptionOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
