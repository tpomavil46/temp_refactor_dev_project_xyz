# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.10.0-v202502060217-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class IssueSummaryOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'installed_on': 'str',
        'issue_type': 'str',
        'key': 'int',
        'summary': 'str',
        'version': 'str'
    }

    attribute_map = {
        'installed_on': 'installedOn',
        'issue_type': 'issueType',
        'key': 'key',
        'summary': 'summary',
        'version': 'version'
    }

    def __init__(self, installed_on=None, issue_type=None, key=None, summary=None, version=None):
        """
        IssueSummaryOutputV1 - a model defined in Swagger
        """

        self._installed_on = None
        self._issue_type = None
        self._key = None
        self._summary = None
        self._version = None

        if installed_on is not None:
          self.installed_on = installed_on
        if issue_type is not None:
          self.issue_type = issue_type
        if key is not None:
          self.key = key
        if summary is not None:
          self.summary = summary
        if version is not None:
          self.version = version

    @property
    def installed_on(self):
        """
        Gets the installed_on of this IssueSummaryOutputV1.
        The timestamp of when this issue was installed on the server

        :return: The installed_on of this IssueSummaryOutputV1.
        :rtype: str
        """
        return self._installed_on

    @installed_on.setter
    def installed_on(self, installed_on):
        """
        Sets the installed_on of this IssueSummaryOutputV1.
        The timestamp of when this issue was installed on the server

        :param installed_on: The installed_on of this IssueSummaryOutputV1.
        :type: str
        """
        if installed_on is None:
            raise ValueError("Invalid value for `installed_on`, must not be `None`")

        self._installed_on = installed_on

    @property
    def issue_type(self):
        """
        Gets the issue_type of this IssueSummaryOutputV1.
        The type of issue

        :return: The issue_type of this IssueSummaryOutputV1.
        :rtype: str
        """
        return self._issue_type

    @issue_type.setter
    def issue_type(self, issue_type):
        """
        Sets the issue_type of this IssueSummaryOutputV1.
        The type of issue

        :param issue_type: The issue_type of this IssueSummaryOutputV1.
        :type: str
        """
        if issue_type is None:
            raise ValueError("Invalid value for `issue_type`, must not be `None`")
        allowed_values = ["BUGFIX", "FEATURE"]
        if issue_type not in allowed_values:
            raise ValueError(
                "Invalid value for `issue_type` ({0}), must be one of {1}"
                .format(issue_type, allowed_values)
            )

        self._issue_type = issue_type

    @property
    def key(self):
        """
        Gets the key of this IssueSummaryOutputV1.
        The unique key that identifies the issue

        :return: The key of this IssueSummaryOutputV1.
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this IssueSummaryOutputV1.
        The unique key that identifies the issue

        :param key: The key of this IssueSummaryOutputV1.
        :type: int
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def summary(self):
        """
        Gets the summary of this IssueSummaryOutputV1.
        A short description of what the issue

        :return: The summary of this IssueSummaryOutputV1.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """
        Sets the summary of this IssueSummaryOutputV1.
        A short description of what the issue

        :param summary: The summary of this IssueSummaryOutputV1.
        :type: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")

        self._summary = summary

    @property
    def version(self):
        """
        Gets the version of this IssueSummaryOutputV1.
        The version associated with this issue

        :return: The version of this IssueSummaryOutputV1.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this IssueSummaryOutputV1.
        The version associated with this issue

        :param version: The version of this IssueSummaryOutputV1.
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IssueSummaryOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
