# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ConditionMonitorNotificationConfigurationInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bcc_email_recipients': 'list[str]',
        'capsule_grouping': 'str',
        'capsule_properties': 'list[str]',
        'cc_email_recipients': 'list[str]',
        'contextual_text': 'str',
        'timezone': 'str',
        'to_email_recipients': 'list[str]'
    }

    attribute_map = {
        'bcc_email_recipients': 'bccEmailRecipients',
        'capsule_grouping': 'capsuleGrouping',
        'capsule_properties': 'capsuleProperties',
        'cc_email_recipients': 'ccEmailRecipients',
        'contextual_text': 'contextualText',
        'timezone': 'timezone',
        'to_email_recipients': 'toEmailRecipients'
    }

    def __init__(self, bcc_email_recipients=None, capsule_grouping=None, capsule_properties=None, cc_email_recipients=None, contextual_text=None, timezone=None, to_email_recipients=None):
        """
        ConditionMonitorNotificationConfigurationInputV1 - a model defined in Swagger
        """

        self._bcc_email_recipients = None
        self._capsule_grouping = None
        self._capsule_properties = None
        self._cc_email_recipients = None
        self._contextual_text = None
        self._timezone = None
        self._to_email_recipients = None

        if bcc_email_recipients is not None:
          self.bcc_email_recipients = bcc_email_recipients
        if capsule_grouping is not None:
          self.capsule_grouping = capsule_grouping
        if capsule_properties is not None:
          self.capsule_properties = capsule_properties
        if cc_email_recipients is not None:
          self.cc_email_recipients = cc_email_recipients
        if contextual_text is not None:
          self.contextual_text = contextual_text
        if timezone is not None:
          self.timezone = timezone
        if to_email_recipients is not None:
          self.to_email_recipients = to_email_recipients

    @property
    def bcc_email_recipients(self):
        """
        Gets the bcc_email_recipients of this ConditionMonitorNotificationConfigurationInputV1.
        Email addresses or Seeq Identity IDs that will be in the Bcc list of the email

        :return: The bcc_email_recipients of this ConditionMonitorNotificationConfigurationInputV1.
        :rtype: list[str]
        """
        return self._bcc_email_recipients

    @bcc_email_recipients.setter
    def bcc_email_recipients(self, bcc_email_recipients):
        """
        Sets the bcc_email_recipients of this ConditionMonitorNotificationConfigurationInputV1.
        Email addresses or Seeq Identity IDs that will be in the Bcc list of the email

        :param bcc_email_recipients: The bcc_email_recipients of this ConditionMonitorNotificationConfigurationInputV1.
        :type: list[str]
        """

        self._bcc_email_recipients = bcc_email_recipients

    @property
    def capsule_grouping(self):
        """
        Gets the capsule_grouping of this ConditionMonitorNotificationConfigurationInputV1.
        Used to customize how capsules are formatted in the notification. 'All' shows all capsules in a single table, 'Condition' groups capsules per condition, and 'Capsule' sends a separate email for each capsule found. Only applicable to Condition Monitors

        :return: The capsule_grouping of this ConditionMonitorNotificationConfigurationInputV1.
        :rtype: str
        """
        return self._capsule_grouping

    @capsule_grouping.setter
    def capsule_grouping(self, capsule_grouping):
        """
        Sets the capsule_grouping of this ConditionMonitorNotificationConfigurationInputV1.
        Used to customize how capsules are formatted in the notification. 'All' shows all capsules in a single table, 'Condition' groups capsules per condition, and 'Capsule' sends a separate email for each capsule found. Only applicable to Condition Monitors

        :param capsule_grouping: The capsule_grouping of this ConditionMonitorNotificationConfigurationInputV1.
        :type: str
        """
        allowed_values = ["CONDITION", "CAPSULE", "ALL"]
        if capsule_grouping not in allowed_values:
            raise ValueError(
                "Invalid value for `capsule_grouping` ({0}), must be one of {1}"
                .format(capsule_grouping, allowed_values)
            )

        self._capsule_grouping = capsule_grouping

    @property
    def capsule_properties(self):
        """
        Gets the capsule_properties of this ConditionMonitorNotificationConfigurationInputV1.
        List of capsule properties that will be included in the notification

        :return: The capsule_properties of this ConditionMonitorNotificationConfigurationInputV1.
        :rtype: list[str]
        """
        return self._capsule_properties

    @capsule_properties.setter
    def capsule_properties(self, capsule_properties):
        """
        Sets the capsule_properties of this ConditionMonitorNotificationConfigurationInputV1.
        List of capsule properties that will be included in the notification

        :param capsule_properties: The capsule_properties of this ConditionMonitorNotificationConfigurationInputV1.
        :type: list[str]
        """

        self._capsule_properties = capsule_properties

    @property
    def cc_email_recipients(self):
        """
        Gets the cc_email_recipients of this ConditionMonitorNotificationConfigurationInputV1.
        Email addresses or Seeq Identity IDs that will be in the Cc list of the email

        :return: The cc_email_recipients of this ConditionMonitorNotificationConfigurationInputV1.
        :rtype: list[str]
        """
        return self._cc_email_recipients

    @cc_email_recipients.setter
    def cc_email_recipients(self, cc_email_recipients):
        """
        Sets the cc_email_recipients of this ConditionMonitorNotificationConfigurationInputV1.
        Email addresses or Seeq Identity IDs that will be in the Cc list of the email

        :param cc_email_recipients: The cc_email_recipients of this ConditionMonitorNotificationConfigurationInputV1.
        :type: list[str]
        """

        self._cc_email_recipients = cc_email_recipients

    @property
    def contextual_text(self):
        """
        Gets the contextual_text of this ConditionMonitorNotificationConfigurationInputV1.
        Custom text that will be inserted into the notification to provide additional context about the notifications. For emails, this can be HTML that includes a link to the worksheet

        :return: The contextual_text of this ConditionMonitorNotificationConfigurationInputV1.
        :rtype: str
        """
        return self._contextual_text

    @contextual_text.setter
    def contextual_text(self, contextual_text):
        """
        Sets the contextual_text of this ConditionMonitorNotificationConfigurationInputV1.
        Custom text that will be inserted into the notification to provide additional context about the notifications. For emails, this can be HTML that includes a link to the worksheet

        :param contextual_text: The contextual_text of this ConditionMonitorNotificationConfigurationInputV1.
        :type: str
        """

        self._contextual_text = contextual_text

    @property
    def timezone(self):
        """
        Gets the timezone of this ConditionMonitorNotificationConfigurationInputV1.
        The IANA timezone to use when formatting the start and end times of capsules, defaults to UTC

        :return: The timezone of this ConditionMonitorNotificationConfigurationInputV1.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this ConditionMonitorNotificationConfigurationInputV1.
        The IANA timezone to use when formatting the start and end times of capsules, defaults to UTC

        :param timezone: The timezone of this ConditionMonitorNotificationConfigurationInputV1.
        :type: str
        """

        self._timezone = timezone

    @property
    def to_email_recipients(self):
        """
        Gets the to_email_recipients of this ConditionMonitorNotificationConfigurationInputV1.
        Email addresses or Seeq Identity IDs that will be in the To list of the email

        :return: The to_email_recipients of this ConditionMonitorNotificationConfigurationInputV1.
        :rtype: list[str]
        """
        return self._to_email_recipients

    @to_email_recipients.setter
    def to_email_recipients(self, to_email_recipients):
        """
        Sets the to_email_recipients of this ConditionMonitorNotificationConfigurationInputV1.
        Email addresses or Seeq Identity IDs that will be in the To list of the email

        :param to_email_recipients: The to_email_recipients of this ConditionMonitorNotificationConfigurationInputV1.
        :type: list[str]
        """

        self._to_email_recipients = to_email_recipients

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ConditionMonitorNotificationConfigurationInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
