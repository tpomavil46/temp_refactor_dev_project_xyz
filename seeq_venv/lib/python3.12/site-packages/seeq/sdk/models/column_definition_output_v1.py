# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ColumnDefinitionOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_name': 'str',
        'column_type': 'str',
        'column_uom': 'str',
        'id': 'str',
        'is_generated': 'bool',
        'is_hidden': 'bool',
        'is_indexed': 'bool',
        'rules': 'list[ColumnRuleOutputV1]',
        'sort_ascending': 'bool',
        'sort_index': 'int'
    }

    attribute_map = {
        'column_name': 'columnName',
        'column_type': 'columnType',
        'column_uom': 'columnUom',
        'id': 'id',
        'is_generated': 'isGenerated',
        'is_hidden': 'isHidden',
        'is_indexed': 'isIndexed',
        'rules': 'rules',
        'sort_ascending': 'sortAscending',
        'sort_index': 'sortIndex'
    }

    def __init__(self, column_name=None, column_type=None, column_uom=None, id=None, is_generated=None, is_hidden=None, is_indexed=None, rules=None, sort_ascending=None, sort_index=None):
        """
        ColumnDefinitionOutputV1 - a model defined in Swagger
        """

        self._column_name = None
        self._column_type = None
        self._column_uom = None
        self._id = None
        self._is_generated = None
        self._is_hidden = None
        self._is_indexed = None
        self._rules = None
        self._sort_ascending = None
        self._sort_index = None

        if column_name is not None:
          self.column_name = column_name
        if column_type is not None:
          self.column_type = column_type
        if column_uom is not None:
          self.column_uom = column_uom
        if id is not None:
          self.id = id
        if is_generated is not None:
          self.is_generated = is_generated
        if is_hidden is not None:
          self.is_hidden = is_hidden
        if is_indexed is not None:
          self.is_indexed = is_indexed
        if rules is not None:
          self.rules = rules
        if sort_ascending is not None:
          self.sort_ascending = sort_ascending
        if sort_index is not None:
          self.sort_index = sort_index

    @property
    def column_name(self):
        """
        Gets the column_name of this ColumnDefinitionOutputV1.
        The column definition's name

        :return: The column_name of this ColumnDefinitionOutputV1.
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """
        Sets the column_name of this ColumnDefinitionOutputV1.
        The column definition's name

        :param column_name: The column_name of this ColumnDefinitionOutputV1.
        :type: str
        """
        if column_name is None:
            raise ValueError("Invalid value for `column_name`, must not be `None`")

        self._column_name = column_name

    @property
    def column_type(self):
        """
        Gets the column_type of this ColumnDefinitionOutputV1.
        The type of the column being defined

        :return: The column_type of this ColumnDefinitionOutputV1.
        :rtype: str
        """
        return self._column_type

    @column_type.setter
    def column_type(self, column_type):
        """
        Sets the column_type of this ColumnDefinitionOutputV1.
        The type of the column being defined

        :param column_type: The column_type of this ColumnDefinitionOutputV1.
        :type: str
        """
        if column_type is None:
            raise ValueError("Invalid value for `column_type`, must not be `None`")
        allowed_values = ["UUID", "TEXT", "NUMERIC", "TIMESTAMPTZ", "BOOLEAN"]
        if column_type not in allowed_values:
            raise ValueError(
                "Invalid value for `column_type` ({0}), must be one of {1}"
                .format(column_type, allowed_values)
            )

        self._column_type = column_type

    @property
    def column_uom(self):
        """
        Gets the column_uom of this ColumnDefinitionOutputV1.
        The column definition's Unit of Measure

        :return: The column_uom of this ColumnDefinitionOutputV1.
        :rtype: str
        """
        return self._column_uom

    @column_uom.setter
    def column_uom(self, column_uom):
        """
        Sets the column_uom of this ColumnDefinitionOutputV1.
        The column definition's Unit of Measure

        :param column_uom: The column_uom of this ColumnDefinitionOutputV1.
        :type: str
        """

        self._column_uom = column_uom

    @property
    def id(self):
        """
        Gets the id of this ColumnDefinitionOutputV1.
        The column definition's ID

        :return: The id of this ColumnDefinitionOutputV1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ColumnDefinitionOutputV1.
        The column definition's ID

        :param id: The id of this ColumnDefinitionOutputV1.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_generated(self):
        """
        Gets the is_generated of this ColumnDefinitionOutputV1.
        Whether the column is generated by Seeq rather than user created

        :return: The is_generated of this ColumnDefinitionOutputV1.
        :rtype: bool
        """
        return self._is_generated

    @is_generated.setter
    def is_generated(self, is_generated):
        """
        Sets the is_generated of this ColumnDefinitionOutputV1.
        Whether the column is generated by Seeq rather than user created

        :param is_generated: The is_generated of this ColumnDefinitionOutputV1.
        :type: bool
        """
        if is_generated is None:
            raise ValueError("Invalid value for `is_generated`, must not be `None`")

        self._is_generated = is_generated

    @property
    def is_hidden(self):
        """
        Gets the is_hidden of this ColumnDefinitionOutputV1.
        Whether the column is hidden

        :return: The is_hidden of this ColumnDefinitionOutputV1.
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """
        Sets the is_hidden of this ColumnDefinitionOutputV1.
        Whether the column is hidden

        :param is_hidden: The is_hidden of this ColumnDefinitionOutputV1.
        :type: bool
        """
        if is_hidden is None:
            raise ValueError("Invalid value for `is_hidden`, must not be `None`")

        self._is_hidden = is_hidden

    @property
    def is_indexed(self):
        """
        Gets the is_indexed of this ColumnDefinitionOutputV1.
        Whether the column is indexed

        :return: The is_indexed of this ColumnDefinitionOutputV1.
        :rtype: bool
        """
        return self._is_indexed

    @is_indexed.setter
    def is_indexed(self, is_indexed):
        """
        Sets the is_indexed of this ColumnDefinitionOutputV1.
        Whether the column is indexed

        :param is_indexed: The is_indexed of this ColumnDefinitionOutputV1.
        :type: bool
        """
        if is_indexed is None:
            raise ValueError("Invalid value for `is_indexed`, must not be `None`")

        self._is_indexed = is_indexed

    @property
    def rules(self):
        """
        Gets the rules of this ColumnDefinitionOutputV1.
        The rules associated with the column definition

        :return: The rules of this ColumnDefinitionOutputV1.
        :rtype: list[ColumnRuleOutputV1]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """
        Sets the rules of this ColumnDefinitionOutputV1.
        The rules associated with the column definition

        :param rules: The rules of this ColumnDefinitionOutputV1.
        :type: list[ColumnRuleOutputV1]
        """
        if rules is None:
            raise ValueError("Invalid value for `rules`, must not be `None`")

        self._rules = rules

    @property
    def sort_ascending(self):
        """
        Gets the sort_ascending of this ColumnDefinitionOutputV1.
        Whether to sort ascending

        :return: The sort_ascending of this ColumnDefinitionOutputV1.
        :rtype: bool
        """
        return self._sort_ascending

    @sort_ascending.setter
    def sort_ascending(self, sort_ascending):
        """
        Sets the sort_ascending of this ColumnDefinitionOutputV1.
        Whether to sort ascending

        :param sort_ascending: The sort_ascending of this ColumnDefinitionOutputV1.
        :type: bool
        """
        if sort_ascending is None:
            raise ValueError("Invalid value for `sort_ascending`, must not be `None`")

        self._sort_ascending = sort_ascending

    @property
    def sort_index(self):
        """
        Gets the sort_index of this ColumnDefinitionOutputV1.
        The sort index for the column, null if not sorted

        :return: The sort_index of this ColumnDefinitionOutputV1.
        :rtype: int
        """
        return self._sort_index

    @sort_index.setter
    def sort_index(self, sort_index):
        """
        Sets the sort_index of this ColumnDefinitionOutputV1.
        The sort index for the column, null if not sorted

        :param sort_index: The sort_index of this ColumnDefinitionOutputV1.
        :type: int
        """

        self._sort_index = sort_index

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ColumnDefinitionOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
