# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ContextLabelOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'archived': 'bool',
        'context': 'str',
        'context_id': 'str',
        'created_at': 'str',
        'creator_id': 'str',
        'datum_id': 'str',
        'end_time': 'str',
        'item_id': 'str',
        'label': 'str',
        'label_category_id': 'str',
        'start_time': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'archived': 'archived',
        'context': 'context',
        'context_id': 'contextId',
        'created_at': 'createdAt',
        'creator_id': 'creatorId',
        'datum_id': 'datumId',
        'end_time': 'endTime',
        'item_id': 'itemId',
        'label': 'label',
        'label_category_id': 'labelCategoryId',
        'start_time': 'startTime',
        'updated_at': 'updatedAt'
    }

    def __init__(self, archived=None, context=None, context_id=None, created_at=None, creator_id=None, datum_id=None, end_time=None, item_id=None, label=None, label_category_id=None, start_time=None, updated_at=None):
        """
        ContextLabelOutputV1 - a model defined in Swagger
        """

        self._archived = None
        self._context = None
        self._context_id = None
        self._created_at = None
        self._creator_id = None
        self._datum_id = None
        self._end_time = None
        self._item_id = None
        self._label = None
        self._label_category_id = None
        self._start_time = None
        self._updated_at = None

        if archived is not None:
          self.archived = archived
        if context is not None:
          self.context = context
        if context_id is not None:
          self.context_id = context_id
        if created_at is not None:
          self.created_at = created_at
        if creator_id is not None:
          self.creator_id = creator_id
        if datum_id is not None:
          self.datum_id = datum_id
        if end_time is not None:
          self.end_time = end_time
        if item_id is not None:
          self.item_id = item_id
        if label is not None:
          self.label = label
        if label_category_id is not None:
          self.label_category_id = label_category_id
        if start_time is not None:
          self.start_time = start_time
        if updated_at is not None:
          self.updated_at = updated_at

    @property
    def archived(self):
        """
        Gets the archived of this ContextLabelOutputV1.
        True if the context is archived, false otherwise

        :return: The archived of this ContextLabelOutputV1.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """
        Sets the archived of this ContextLabelOutputV1.
        True if the context is archived, false otherwise

        :param archived: The archived of this ContextLabelOutputV1.
        :type: bool
        """
        if archived is None:
            raise ValueError("Invalid value for `archived`, must not be `None`")

        self._archived = archived

    @property
    def context(self):
        """
        Gets the context of this ContextLabelOutputV1.
        The content of the context

        :return: The context of this ContextLabelOutputV1.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """
        Sets the context of this ContextLabelOutputV1.
        The content of the context

        :param context: The context of this ContextLabelOutputV1.
        :type: str
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")

        self._context = context

    @property
    def context_id(self):
        """
        Gets the context_id of this ContextLabelOutputV1.
        ID of the context

        :return: The context_id of this ContextLabelOutputV1.
        :rtype: str
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """
        Sets the context_id of this ContextLabelOutputV1.
        ID of the context

        :param context_id: The context_id of this ContextLabelOutputV1.
        :type: str
        """

        self._context_id = context_id

    @property
    def created_at(self):
        """
        Gets the created_at of this ContextLabelOutputV1.
        The time, as an ISO-8601 timestamp, when the context was created

        :return: The created_at of this ContextLabelOutputV1.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ContextLabelOutputV1.
        The time, as an ISO-8601 timestamp, when the context was created

        :param created_at: The created_at of this ContextLabelOutputV1.
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def creator_id(self):
        """
        Gets the creator_id of this ContextLabelOutputV1.
        ID of the user that created the context

        :return: The creator_id of this ContextLabelOutputV1.
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """
        Sets the creator_id of this ContextLabelOutputV1.
        ID of the user that created the context

        :param creator_id: The creator_id of this ContextLabelOutputV1.
        :type: str
        """
        if creator_id is None:
            raise ValueError("Invalid value for `creator_id`, must not be `None`")

        self._creator_id = creator_id

    @property
    def datum_id(self):
        """
        Gets the datum_id of this ContextLabelOutputV1.
        If provided, the ID of a more specific aspect of the Item to associate with the context, such as the ID of a capsule

        :return: The datum_id of this ContextLabelOutputV1.
        :rtype: str
        """
        return self._datum_id

    @datum_id.setter
    def datum_id(self, datum_id):
        """
        Sets the datum_id of this ContextLabelOutputV1.
        If provided, the ID of a more specific aspect of the Item to associate with the context, such as the ID of a capsule

        :param datum_id: The datum_id of this ContextLabelOutputV1.
        :type: str
        """

        self._datum_id = datum_id

    @property
    def end_time(self):
        """
        Gets the end_time of this ContextLabelOutputV1.
        The end time of the label in the form of an ISO8601 timestamp

        :return: The end_time of this ContextLabelOutputV1.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this ContextLabelOutputV1.
        The end time of the label in the form of an ISO8601 timestamp

        :param end_time: The end_time of this ContextLabelOutputV1.
        :type: str
        """

        self._end_time = end_time

    @property
    def item_id(self):
        """
        Gets the item_id of this ContextLabelOutputV1.
        ID of the Item that will be associated with this context

        :return: The item_id of this ContextLabelOutputV1.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """
        Sets the item_id of this ContextLabelOutputV1.
        ID of the Item that will be associated with this context

        :param item_id: The item_id of this ContextLabelOutputV1.
        :type: str
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")

        self._item_id = item_id

    @property
    def label(self):
        """
        Gets the label of this ContextLabelOutputV1.
        The text of the label

        :return: The label of this ContextLabelOutputV1.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this ContextLabelOutputV1.
        The text of the label

        :param label: The label of this ContextLabelOutputV1.
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def label_category_id(self):
        """
        Gets the label_category_id of this ContextLabelOutputV1.
        The ID of the label category

        :return: The label_category_id of this ContextLabelOutputV1.
        :rtype: str
        """
        return self._label_category_id

    @label_category_id.setter
    def label_category_id(self, label_category_id):
        """
        Sets the label_category_id of this ContextLabelOutputV1.
        The ID of the label category

        :param label_category_id: The label_category_id of this ContextLabelOutputV1.
        :type: str
        """
        if label_category_id is None:
            raise ValueError("Invalid value for `label_category_id`, must not be `None`")

        self._label_category_id = label_category_id

    @property
    def start_time(self):
        """
        Gets the start_time of this ContextLabelOutputV1.
        The start time of the label in the form of an ISO8601 timestamp

        :return: The start_time of this ContextLabelOutputV1.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this ContextLabelOutputV1.
        The start time of the label in the form of an ISO8601 timestamp

        :param start_time: The start_time of this ContextLabelOutputV1.
        :type: str
        """

        self._start_time = start_time

    @property
    def updated_at(self):
        """
        Gets the updated_at of this ContextLabelOutputV1.
        The time, as an ISO-8601 timestamp, when the context was last updated

        :return: The updated_at of this ContextLabelOutputV1.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this ContextLabelOutputV1.
        The time, as an ISO-8601 timestamp, when the context was last updated

        :param updated_at: The updated_at of this ContextLabelOutputV1.
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ContextLabelOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
