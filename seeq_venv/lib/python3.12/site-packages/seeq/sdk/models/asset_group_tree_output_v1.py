# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class AssetGroupTreeOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'children': 'list[AssetGroupTreeOutputV1]',
        'datasource_id': 'str',
        'description': 'str',
        'item': 'ItemPreviewWithAssetsV1',
        'parameters': 'list[FormulaParameterOutputV1]'
    }

    attribute_map = {
        'children': 'children',
        'datasource_id': 'datasourceId',
        'description': 'description',
        'item': 'item',
        'parameters': 'parameters'
    }

    def __init__(self, children=None, datasource_id=None, description=None, item=None, parameters=None):
        """
        AssetGroupTreeOutputV1 - a model defined in Swagger
        """

        self._children = None
        self._datasource_id = None
        self._description = None
        self._item = None
        self._parameters = None

        if children is not None:
          self.children = children
        if datasource_id is not None:
          self.datasource_id = datasource_id
        if description is not None:
          self.description = description
        if item is not None:
          self.item = item
        if parameters is not None:
          self.parameters = parameters

    @property
    def children(self):
        """
        Gets the children of this AssetGroupTreeOutputV1.
        The list of the tree node's children

        :return: The children of this AssetGroupTreeOutputV1.
        :rtype: list[AssetGroupTreeOutputV1]
        """
        return self._children

    @children.setter
    def children(self, children):
        """
        Sets the children of this AssetGroupTreeOutputV1.
        The list of the tree node's children

        :param children: The children of this AssetGroupTreeOutputV1.
        :type: list[AssetGroupTreeOutputV1]
        """

        self._children = children

    @property
    def datasource_id(self):
        """
        Gets the datasource_id of this AssetGroupTreeOutputV1.
        The datasource id of the tree node

        :return: The datasource_id of this AssetGroupTreeOutputV1.
        :rtype: str
        """
        return self._datasource_id

    @datasource_id.setter
    def datasource_id(self, datasource_id):
        """
        Sets the datasource_id of this AssetGroupTreeOutputV1.
        The datasource id of the tree node

        :param datasource_id: The datasource_id of this AssetGroupTreeOutputV1.
        :type: str
        """

        self._datasource_id = datasource_id

    @property
    def description(self):
        """
        Gets the description of this AssetGroupTreeOutputV1.
        A description of the tree node

        :return: The description of this AssetGroupTreeOutputV1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this AssetGroupTreeOutputV1.
        A description of the tree node

        :param description: The description of this AssetGroupTreeOutputV1.
        :type: str
        """

        self._description = description

    @property
    def item(self):
        """
        Gets the item of this AssetGroupTreeOutputV1.

        :return: The item of this AssetGroupTreeOutputV1.
        :rtype: ItemPreviewWithAssetsV1
        """
        return self._item

    @item.setter
    def item(self, item):
        """
        Sets the item of this AssetGroupTreeOutputV1.

        :param item: The item of this AssetGroupTreeOutputV1.
        :type: ItemPreviewWithAssetsV1
        """

        self._item = item

    @property
    def parameters(self):
        """
        Gets the parameters of this AssetGroupTreeOutputV1.
        Formula Parameters used to create the formula

        :return: The parameters of this AssetGroupTreeOutputV1.
        :rtype: list[FormulaParameterOutputV1]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this AssetGroupTreeOutputV1.
        Formula Parameters used to create the formula

        :param parameters: The parameters of this AssetGroupTreeOutputV1.
        :type: list[FormulaParameterOutputV1]
        """

        self._parameters = parameters

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AssetGroupTreeOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
