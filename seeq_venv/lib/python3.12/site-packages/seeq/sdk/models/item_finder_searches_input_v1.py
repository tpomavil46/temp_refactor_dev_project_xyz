# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ItemFinderSearchesInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fixed_list_searches': 'list[FixedListSearchV1]',
        'limit': 'int',
        'property_searches': 'list[PropertySearchV1]',
        'scaling_table_uuid_column_searches': 'list[ScalingTableUUIDColumnSearchV1]',
        'searches': 'list[SwapAcrossAssetsSearchV1]'
    }

    attribute_map = {
        'fixed_list_searches': 'fixedListSearches',
        'limit': 'limit',
        'property_searches': 'propertySearches',
        'scaling_table_uuid_column_searches': 'scalingTableUUIDColumnSearches',
        'searches': 'searches'
    }

    def __init__(self, fixed_list_searches=None, limit=40, property_searches=None, scaling_table_uuid_column_searches=None, searches=None):
        """
        ItemFinderSearchesInputV1 - a model defined in Swagger
        """

        self._fixed_list_searches = None
        self._limit = None
        self._property_searches = None
        self._scaling_table_uuid_column_searches = None
        self._searches = None

        if fixed_list_searches is not None:
          self.fixed_list_searches = fixed_list_searches
        if limit is not None:
          self.limit = limit
        if property_searches is not None:
          self.property_searches = property_searches
        if scaling_table_uuid_column_searches is not None:
          self.scaling_table_uuid_column_searches = scaling_table_uuid_column_searches
        if searches is not None:
          self.searches = searches

    @property
    def fixed_list_searches(self):
        """
        Gets the fixed_list_searches of this ItemFinderSearchesInputV1.
        The list of searches containing a list of item IDs to always include or exclude in the output

        :return: The fixed_list_searches of this ItemFinderSearchesInputV1.
        :rtype: list[FixedListSearchV1]
        """
        return self._fixed_list_searches

    @fixed_list_searches.setter
    def fixed_list_searches(self, fixed_list_searches):
        """
        Sets the fixed_list_searches of this ItemFinderSearchesInputV1.
        The list of searches containing a list of item IDs to always include or exclude in the output

        :param fixed_list_searches: The fixed_list_searches of this ItemFinderSearchesInputV1.
        :type: list[FixedListSearchV1]
        """

        self._fixed_list_searches = fixed_list_searches

    @property
    def limit(self):
        """
        Gets the limit of this ItemFinderSearchesInputV1.
        The maximum number of search results that will be returned

        :return: The limit of this ItemFinderSearchesInputV1.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this ItemFinderSearchesInputV1.
        The maximum number of search results that will be returned

        :param limit: The limit of this ItemFinderSearchesInputV1.
        :type: int
        """

        self._limit = limit

    @property
    def property_searches(self):
        """
        Gets the property_searches of this ItemFinderSearchesInputV1.
        The list of searches based on properties

        :return: The property_searches of this ItemFinderSearchesInputV1.
        :rtype: list[PropertySearchV1]
        """
        return self._property_searches

    @property_searches.setter
    def property_searches(self, property_searches):
        """
        Sets the property_searches of this ItemFinderSearchesInputV1.
        The list of searches based on properties

        :param property_searches: The property_searches of this ItemFinderSearchesInputV1.
        :type: list[PropertySearchV1]
        """

        self._property_searches = property_searches

    @property
    def scaling_table_uuid_column_searches(self):
        """
        Gets the scaling_table_uuid_column_searches of this ItemFinderSearchesInputV1.
        The list of searches for finding items based on a materialized table's UUID column

        :return: The scaling_table_uuid_column_searches of this ItemFinderSearchesInputV1.
        :rtype: list[ScalingTableUUIDColumnSearchV1]
        """
        return self._scaling_table_uuid_column_searches

    @scaling_table_uuid_column_searches.setter
    def scaling_table_uuid_column_searches(self, scaling_table_uuid_column_searches):
        """
        Sets the scaling_table_uuid_column_searches of this ItemFinderSearchesInputV1.
        The list of searches for finding items based on a materialized table's UUID column

        :param scaling_table_uuid_column_searches: The scaling_table_uuid_column_searches of this ItemFinderSearchesInputV1.
        :type: list[ScalingTableUUIDColumnSearchV1]
        """

        self._scaling_table_uuid_column_searches = scaling_table_uuid_column_searches

    @property
    def searches(self):
        """
        Gets the searches of this ItemFinderSearchesInputV1.
        The list of searches for swapping across assets to find items

        :return: The searches of this ItemFinderSearchesInputV1.
        :rtype: list[SwapAcrossAssetsSearchV1]
        """
        return self._searches

    @searches.setter
    def searches(self, searches):
        """
        Sets the searches of this ItemFinderSearchesInputV1.
        The list of searches for swapping across assets to find items

        :param searches: The searches of this ItemFinderSearchesInputV1.
        :type: list[SwapAcrossAssetsSearchV1]
        """

        self._searches = searches

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ItemFinderSearchesInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
