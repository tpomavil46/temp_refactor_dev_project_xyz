# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class TableDefinitionUpdateInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch_action': 'str',
        'description': 'str',
        'name': 'str',
        'subscription_id': 'str'
    }

    attribute_map = {
        'batch_action': 'batchAction',
        'description': 'description',
        'name': 'name',
        'subscription_id': 'subscriptionId'
    }

    def __init__(self, batch_action='UPDATE_EXISTING_INSERT_NEW_CLEANUP', description=None, name=None, subscription_id=None):
        """
        TableDefinitionUpdateInputV1 - a model defined in Swagger
        """

        self._batch_action = None
        self._description = None
        self._name = None
        self._subscription_id = None

        if batch_action is not None:
          self.batch_action = batch_action
        if description is not None:
          self.description = description
        if name is not None:
          self.name = name
        if subscription_id is not None:
          self.subscription_id = subscription_id

    @property
    def batch_action(self):
        """
        Gets the batch_action of this TableDefinitionUpdateInputV1.
        The action to take for a batch update. Valid options are as follows (UPDATE_EXISTING_INSERT_NEW_CLEANUP is the default): UPDATE_EXISTING_INSERT_NEW_CLEANUP: Update existing rows and insert new rows, but remove any rows that weren't updated or inserted UPDATE_EXISTING_INSERT_NEW: Update existing rows and insert new rows ONLY_UPDATE_EXISTING: Only update existing rows, but don’t insert new rows ONLY_INSERT_NEW: Only insert new rows, but don’t update existing rows 

        :return: The batch_action of this TableDefinitionUpdateInputV1.
        :rtype: str
        """
        return self._batch_action

    @batch_action.setter
    def batch_action(self, batch_action):
        """
        Sets the batch_action of this TableDefinitionUpdateInputV1.
        The action to take for a batch update. Valid options are as follows (UPDATE_EXISTING_INSERT_NEW_CLEANUP is the default): UPDATE_EXISTING_INSERT_NEW_CLEANUP: Update existing rows and insert new rows, but remove any rows that weren't updated or inserted UPDATE_EXISTING_INSERT_NEW: Update existing rows and insert new rows ONLY_UPDATE_EXISTING: Only update existing rows, but don’t insert new rows ONLY_INSERT_NEW: Only insert new rows, but don’t update existing rows 

        :param batch_action: The batch_action of this TableDefinitionUpdateInputV1.
        :type: str
        """
        allowed_values = ["UPDATE_EXISTING_INSERT_NEW_CLEANUP", "UPDATE_EXISTING_INSERT_NEW", "ONLY_UPDATE_EXISTING", "ONLY_INSERT_NEW"]
        if batch_action not in allowed_values:
            raise ValueError(
                "Invalid value for `batch_action` ({0}), must be one of {1}"
                .format(batch_action, allowed_values)
            )

        self._batch_action = batch_action

    @property
    def description(self):
        """
        Gets the description of this TableDefinitionUpdateInputV1.
        Clarifying information or other plain language description of this item. An input of just whitespaces is equivalent to a null input.

        :return: The description of this TableDefinitionUpdateInputV1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this TableDefinitionUpdateInputV1.
        Clarifying information or other plain language description of this item. An input of just whitespaces is equivalent to a null input.

        :param description: The description of this TableDefinitionUpdateInputV1.
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """
        Gets the name of this TableDefinitionUpdateInputV1.
        Human readable name. Required during creation. An input of just whitespaces is equivalent to a null input.

        :return: The name of this TableDefinitionUpdateInputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TableDefinitionUpdateInputV1.
        Human readable name. Required during creation. An input of just whitespaces is equivalent to a null input.

        :param name: The name of this TableDefinitionUpdateInputV1.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def subscription_id(self):
        """
        Gets the subscription_id of this TableDefinitionUpdateInputV1.
        The ID of the item (only condition monitors supported for now) to subscribe to.

        :return: The subscription_id of this TableDefinitionUpdateInputV1.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """
        Sets the subscription_id of this TableDefinitionUpdateInputV1.
        The ID of the item (only condition monitors supported for now) to subscribe to.

        :param subscription_id: The subscription_id of this TableDefinitionUpdateInputV1.
        :type: str
        """

        self._subscription_id = subscription_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TableDefinitionUpdateInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
