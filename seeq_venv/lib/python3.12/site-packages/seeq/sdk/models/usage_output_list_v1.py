# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class UsageOutputListV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'list[UsageOutputV1]',
        'has_more': 'bool'
    }

    attribute_map = {
        'content': 'content',
        'has_more': 'hasMore'
    }

    def __init__(self, content=None, has_more=None):
        """
        UsageOutputListV1 - a model defined in Swagger
        """

        self._content = None
        self._has_more = None

        if content is not None:
          self.content = content
        if has_more is not None:
          self.has_more = has_more

    @property
    def content(self):
        """
        Gets the content of this UsageOutputListV1.
        Data Consumption records

        :return: The content of this UsageOutputListV1.
        :rtype: list[UsageOutputV1]
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this UsageOutputListV1.
        Data Consumption records

        :param content: The content of this UsageOutputListV1.
        :type: list[UsageOutputV1]
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def has_more(self):
        """
        Gets the has_more of this UsageOutputListV1.
        True if there are additional records not included because the limit was reached

        :return: The has_more of this UsageOutputListV1.
        :rtype: bool
        """
        return self._has_more

    @has_more.setter
    def has_more(self, has_more):
        """
        Sets the has_more of this UsageOutputListV1.
        True if there are additional records not included because the limit was reached

        :param has_more: The has_more of this UsageOutputListV1.
        :type: bool
        """
        if has_more is None:
            raise ValueError("Invalid value for `has_more`, must not be `None`")

        self._has_more = has_more

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UsageOutputListV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
