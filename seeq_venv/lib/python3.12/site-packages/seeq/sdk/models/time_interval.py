# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.10.0-v202502060217-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class TimeInterval(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'duration_time': 'int',
        'empty': 'bool',
        'end_string': 'str',
        'end_time': 'int',
        'limit': 'bool',
        'start_string': 'str',
        'start_time': 'int',
        'time_key': 'int'
    }

    attribute_map = {
        'duration_time': 'durationTime',
        'empty': 'empty',
        'end_string': 'endString',
        'end_time': 'endTime',
        'limit': 'limit',
        'start_string': 'startString',
        'start_time': 'startTime',
        'time_key': 'timeKey'
    }

    def __init__(self, duration_time=None, empty=None, end_string=None, end_time=None, limit=None, start_string=None, start_time=None, time_key=None):
        """
        TimeInterval - a model defined in Swagger
        """

        self._duration_time = None
        self._empty = None
        self._end_string = None
        self._end_time = None
        self._limit = None
        self._start_string = None
        self._start_time = None
        self._time_key = None

        if duration_time is not None:
          self.duration_time = duration_time
        if empty is not None:
          self.empty = empty
        if end_string is not None:
          self.end_string = end_string
        if end_time is not None:
          self.end_time = end_time
        if limit is not None:
          self.limit = limit
        if start_string is not None:
          self.start_string = start_string
        if start_time is not None:
          self.start_time = start_time
        if time_key is not None:
          self.time_key = time_key

    @property
    def duration_time(self):
        """
        Gets the duration_time of this TimeInterval.

        :return: The duration_time of this TimeInterval.
        :rtype: int
        """
        return self._duration_time

    @duration_time.setter
    def duration_time(self, duration_time):
        """
        Sets the duration_time of this TimeInterval.

        :param duration_time: The duration_time of this TimeInterval.
        :type: int
        """

        self._duration_time = duration_time

    @property
    def empty(self):
        """
        Gets the empty of this TimeInterval.

        :return: The empty of this TimeInterval.
        :rtype: bool
        """
        return self._empty

    @empty.setter
    def empty(self, empty):
        """
        Sets the empty of this TimeInterval.

        :param empty: The empty of this TimeInterval.
        :type: bool
        """

        self._empty = empty

    @property
    def end_string(self):
        """
        Gets the end_string of this TimeInterval.

        :return: The end_string of this TimeInterval.
        :rtype: str
        """
        return self._end_string

    @end_string.setter
    def end_string(self, end_string):
        """
        Sets the end_string of this TimeInterval.

        :param end_string: The end_string of this TimeInterval.
        :type: str
        """

        self._end_string = end_string

    @property
    def end_time(self):
        """
        Gets the end_time of this TimeInterval.

        :return: The end_time of this TimeInterval.
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this TimeInterval.

        :param end_time: The end_time of this TimeInterval.
        :type: int
        """

        self._end_time = end_time

    @property
    def limit(self):
        """
        Gets the limit of this TimeInterval.

        :return: The limit of this TimeInterval.
        :rtype: bool
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this TimeInterval.

        :param limit: The limit of this TimeInterval.
        :type: bool
        """

        self._limit = limit

    @property
    def start_string(self):
        """
        Gets the start_string of this TimeInterval.

        :return: The start_string of this TimeInterval.
        :rtype: str
        """
        return self._start_string

    @start_string.setter
    def start_string(self, start_string):
        """
        Sets the start_string of this TimeInterval.

        :param start_string: The start_string of this TimeInterval.
        :type: str
        """

        self._start_string = start_string

    @property
    def start_time(self):
        """
        Gets the start_time of this TimeInterval.

        :return: The start_time of this TimeInterval.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this TimeInterval.

        :param start_time: The start_time of this TimeInterval.
        :type: int
        """

        self._start_time = start_time

    @property
    def time_key(self):
        """
        Gets the time_key of this TimeInterval.

        :return: The time_key of this TimeInterval.
        :rtype: int
        """
        return self._time_key

    @time_key.setter
    def time_key(self, time_key):
        """
        Sets the time_key of this TimeInterval.

        :param time_key: The time_key of this TimeInterval.
        :type: int
        """

        self._time_key = time_key

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TimeInterval):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
