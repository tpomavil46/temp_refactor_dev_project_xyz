# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class FolderInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'branch_from': 'str',
        'description': 'str',
        'name': 'str',
        'owner_id': 'str',
        'parent_folder_id': 'str'
    }

    attribute_map = {
        'branch_from': 'branchFrom',
        'description': 'description',
        'name': 'name',
        'owner_id': 'ownerId',
        'parent_folder_id': 'parentFolderId'
    }

    def __init__(self, branch_from=None, description=None, name=None, owner_id=None, parent_folder_id=None):
        """
        FolderInputV1 - a model defined in Swagger
        """

        self._branch_from = None
        self._description = None
        self._name = None
        self._owner_id = None
        self._parent_folder_id = None

        if branch_from is not None:
          self.branch_from = branch_from
        if description is not None:
          self.description = description
        if name is not None:
          self.name = name
        if owner_id is not None:
          self.owner_id = owner_id
        if parent_folder_id is not None:
          self.parent_folder_id = parent_folder_id

    @property
    def branch_from(self):
        """
        Gets the branch_from of this FolderInputV1.
        Create a new folder by duplicating the contents of the folder with the specified ID. When null, no branching will occur; resulting folder will be empty. By default the new folder will have the same parent as the original folder.

        :return: The branch_from of this FolderInputV1.
        :rtype: str
        """
        return self._branch_from

    @branch_from.setter
    def branch_from(self, branch_from):
        """
        Sets the branch_from of this FolderInputV1.
        Create a new folder by duplicating the contents of the folder with the specified ID. When null, no branching will occur; resulting folder will be empty. By default the new folder will have the same parent as the original folder.

        :param branch_from: The branch_from of this FolderInputV1.
        :type: str
        """

        self._branch_from = branch_from

    @property
    def description(self):
        """
        Gets the description of this FolderInputV1.
        Clarifying information or other plain language description of this item. An input of just whitespaces is equivalent to a null input.

        :return: The description of this FolderInputV1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this FolderInputV1.
        Clarifying information or other plain language description of this item. An input of just whitespaces is equivalent to a null input.

        :param description: The description of this FolderInputV1.
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """
        Gets the name of this FolderInputV1.
        Human readable name. Required during creation. An input of just whitespaces is equivalent to a null input.

        :return: The name of this FolderInputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this FolderInputV1.
        Human readable name. Required during creation. An input of just whitespaces is equivalent to a null input.

        :param name: The name of this FolderInputV1.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def owner_id(self):
        """
        Gets the owner_id of this FolderInputV1.
        The ID of the User that owns this folder. If omitted when creating a new Folder, the authenticated user is used by default. Only administrators may set this value.

        :return: The owner_id of this FolderInputV1.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """
        Sets the owner_id of this FolderInputV1.
        The ID of the User that owns this folder. If omitted when creating a new Folder, the authenticated user is used by default. Only administrators may set this value.

        :param owner_id: The owner_id of this FolderInputV1.
        :type: str
        """

        self._owner_id = owner_id

    @property
    def parent_folder_id(self):
        """
        Gets the parent_folder_id of this FolderInputV1.
        The ID of the parent folder for this folder. Special values of 'mine' or 'corporate' place the item in the authenticated user's home folder or the corporate folder, respectively. If null, the folder will be created in the user's home folder.

        :return: The parent_folder_id of this FolderInputV1.
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """
        Sets the parent_folder_id of this FolderInputV1.
        The ID of the parent folder for this folder. Special values of 'mine' or 'corporate' place the item in the authenticated user's home folder or the corporate folder, respectively. If null, the folder will be created in the user's home folder.

        :param parent_folder_id: The parent_folder_id of this FolderInputV1.
        :type: str
        """

        self._parent_folder_id = parent_folder_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FolderInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
