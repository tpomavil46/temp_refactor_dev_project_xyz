# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ProjectOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ancestors': 'list[ItemPreviewV1]',
        'configuration': 'list[ScalarPropertyV1]',
        'created_at': 'str',
        'creator': 'IdentityPreviewV1',
        'description': 'str',
        'effective_permissions': 'PermissionsV1',
        'id': 'str',
        'is_archived': 'bool',
        'is_redacted': 'bool',
        'marked_as_favorite': 'bool',
        'name': 'str',
        'owner': 'IdentityPreviewV1',
        'parent_folder_id': 'str',
        'project_type': 'str',
        'resource_size': 'str',
        'scheduled_notebooks': 'list[ScheduledNotebookOutputV1]',
        'status_message': 'str',
        'translation_key': 'str',
        'type': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'ancestors': 'ancestors',
        'configuration': 'configuration',
        'created_at': 'createdAt',
        'creator': 'creator',
        'description': 'description',
        'effective_permissions': 'effectivePermissions',
        'id': 'id',
        'is_archived': 'isArchived',
        'is_redacted': 'isRedacted',
        'marked_as_favorite': 'markedAsFavorite',
        'name': 'name',
        'owner': 'owner',
        'parent_folder_id': 'parentFolderId',
        'project_type': 'projectType',
        'resource_size': 'resourceSize',
        'scheduled_notebooks': 'scheduledNotebooks',
        'status_message': 'statusMessage',
        'translation_key': 'translationKey',
        'type': 'type',
        'updated_at': 'updatedAt'
    }

    def __init__(self, ancestors=None, configuration=None, created_at=None, creator=None, description=None, effective_permissions=None, id=None, is_archived=False, is_redacted=False, marked_as_favorite=False, name=None, owner=None, parent_folder_id=None, project_type=None, resource_size=None, scheduled_notebooks=None, status_message=None, translation_key=None, type=None, updated_at=None):
        """
        ProjectOutputV1 - a model defined in Swagger
        """

        self._ancestors = None
        self._configuration = None
        self._created_at = None
        self._creator = None
        self._description = None
        self._effective_permissions = None
        self._id = None
        self._is_archived = None
        self._is_redacted = None
        self._marked_as_favorite = None
        self._name = None
        self._owner = None
        self._parent_folder_id = None
        self._project_type = None
        self._resource_size = None
        self._scheduled_notebooks = None
        self._status_message = None
        self._translation_key = None
        self._type = None
        self._updated_at = None

        if ancestors is not None:
          self.ancestors = ancestors
        if configuration is not None:
          self.configuration = configuration
        if created_at is not None:
          self.created_at = created_at
        if creator is not None:
          self.creator = creator
        if description is not None:
          self.description = description
        if effective_permissions is not None:
          self.effective_permissions = effective_permissions
        if id is not None:
          self.id = id
        if is_archived is not None:
          self.is_archived = is_archived
        if is_redacted is not None:
          self.is_redacted = is_redacted
        if marked_as_favorite is not None:
          self.marked_as_favorite = marked_as_favorite
        if name is not None:
          self.name = name
        if owner is not None:
          self.owner = owner
        if parent_folder_id is not None:
          self.parent_folder_id = parent_folder_id
        if project_type is not None:
          self.project_type = project_type
        if resource_size is not None:
          self.resource_size = resource_size
        if scheduled_notebooks is not None:
          self.scheduled_notebooks = scheduled_notebooks
        if status_message is not None:
          self.status_message = status_message
        if translation_key is not None:
          self.translation_key = translation_key
        if type is not None:
          self.type = type
        if updated_at is not None:
          self.updated_at = updated_at

    @property
    def ancestors(self):
        """
        Gets the ancestors of this ProjectOutputV1.
        The list of folder ancestors, starting at the topmost folder to which the user has access

        :return: The ancestors of this ProjectOutputV1.
        :rtype: list[ItemPreviewV1]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """
        Sets the ancestors of this ProjectOutputV1.
        The list of folder ancestors, starting at the topmost folder to which the user has access

        :param ancestors: The ancestors of this ProjectOutputV1.
        :type: list[ItemPreviewV1]
        """

        self._ancestors = ancestors

    @property
    def configuration(self):
        """
        Gets the configuration of this ProjectOutputV1.
        The list of configuration settings for the project.

        :return: The configuration of this ProjectOutputV1.
        :rtype: list[ScalarPropertyV1]
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """
        Sets the configuration of this ProjectOutputV1.
        The list of configuration settings for the project.

        :param configuration: The configuration of this ProjectOutputV1.
        :type: list[ScalarPropertyV1]
        """

        self._configuration = configuration

    @property
    def created_at(self):
        """
        Gets the created_at of this ProjectOutputV1.
        The ISO 8601 date of when the folder, analysis, topic, or project was created (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm)

        :return: The created_at of this ProjectOutputV1.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ProjectOutputV1.
        The ISO 8601 date of when the folder, analysis, topic, or project was created (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm)

        :param created_at: The created_at of this ProjectOutputV1.
        :type: str
        """

        self._created_at = created_at

    @property
    def creator(self):
        """
        Gets the creator of this ProjectOutputV1.

        :return: The creator of this ProjectOutputV1.
        :rtype: IdentityPreviewV1
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """
        Sets the creator of this ProjectOutputV1.

        :param creator: The creator of this ProjectOutputV1.
        :type: IdentityPreviewV1
        """

        self._creator = creator

    @property
    def description(self):
        """
        Gets the description of this ProjectOutputV1.
        Clarifying information or other plain language description of this item

        :return: The description of this ProjectOutputV1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ProjectOutputV1.
        Clarifying information or other plain language description of this item

        :param description: The description of this ProjectOutputV1.
        :type: str
        """

        self._description = description

    @property
    def effective_permissions(self):
        """
        Gets the effective_permissions of this ProjectOutputV1.

        :return: The effective_permissions of this ProjectOutputV1.
        :rtype: PermissionsV1
        """
        return self._effective_permissions

    @effective_permissions.setter
    def effective_permissions(self, effective_permissions):
        """
        Sets the effective_permissions of this ProjectOutputV1.

        :param effective_permissions: The effective_permissions of this ProjectOutputV1.
        :type: PermissionsV1
        """

        self._effective_permissions = effective_permissions

    @property
    def id(self):
        """
        Gets the id of this ProjectOutputV1.
        The ID that can be used to interact with the item

        :return: The id of this ProjectOutputV1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ProjectOutputV1.
        The ID that can be used to interact with the item

        :param id: The id of this ProjectOutputV1.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_archived(self):
        """
        Gets the is_archived of this ProjectOutputV1.
        Whether item is archived

        :return: The is_archived of this ProjectOutputV1.
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """
        Sets the is_archived of this ProjectOutputV1.
        Whether item is archived

        :param is_archived: The is_archived of this ProjectOutputV1.
        :type: bool
        """

        self._is_archived = is_archived

    @property
    def is_redacted(self):
        """
        Gets the is_redacted of this ProjectOutputV1.
        Whether item is redacted

        :return: The is_redacted of this ProjectOutputV1.
        :rtype: bool
        """
        return self._is_redacted

    @is_redacted.setter
    def is_redacted(self, is_redacted):
        """
        Sets the is_redacted of this ProjectOutputV1.
        Whether item is redacted

        :param is_redacted: The is_redacted of this ProjectOutputV1.
        :type: bool
        """

        self._is_redacted = is_redacted

    @property
    def marked_as_favorite(self):
        """
        Gets the marked_as_favorite of this ProjectOutputV1.
        Flag indicating whether this folder, analysis, topic, or project has been marked as a favorite by the current user

        :return: The marked_as_favorite of this ProjectOutputV1.
        :rtype: bool
        """
        return self._marked_as_favorite

    @marked_as_favorite.setter
    def marked_as_favorite(self, marked_as_favorite):
        """
        Sets the marked_as_favorite of this ProjectOutputV1.
        Flag indicating whether this folder, analysis, topic, or project has been marked as a favorite by the current user

        :param marked_as_favorite: The marked_as_favorite of this ProjectOutputV1.
        :type: bool
        """

        self._marked_as_favorite = marked_as_favorite

    @property
    def name(self):
        """
        Gets the name of this ProjectOutputV1.
        The human readable name

        :return: The name of this ProjectOutputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ProjectOutputV1.
        The human readable name

        :param name: The name of this ProjectOutputV1.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def owner(self):
        """
        Gets the owner of this ProjectOutputV1.

        :return: The owner of this ProjectOutputV1.
        :rtype: IdentityPreviewV1
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this ProjectOutputV1.

        :param owner: The owner of this ProjectOutputV1.
        :type: IdentityPreviewV1
        """

        self._owner = owner

    @property
    def parent_folder_id(self):
        """
        Gets the parent_folder_id of this ProjectOutputV1.
        The ID of the parent folder which this folder, analysis, topic, or project is a subfolder of

        :return: The parent_folder_id of this ProjectOutputV1.
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """
        Sets the parent_folder_id of this ProjectOutputV1.
        The ID of the parent folder which this folder, analysis, topic, or project is a subfolder of

        :param parent_folder_id: The parent_folder_id of this ProjectOutputV1.
        :type: str
        """

        self._parent_folder_id = parent_folder_id

    @property
    def project_type(self):
        """
        Gets the project_type of this ProjectOutputV1.
        The type of project. One of DATA_LAB (default) or DATA_LAB_FUNCTIONS.

        :return: The project_type of this ProjectOutputV1.
        :rtype: str
        """
        return self._project_type

    @project_type.setter
    def project_type(self, project_type):
        """
        Sets the project_type of this ProjectOutputV1.
        The type of project. One of DATA_LAB (default) or DATA_LAB_FUNCTIONS.

        :param project_type: The project_type of this ProjectOutputV1.
        :type: str
        """
        allowed_values = ["DATA_LAB", "DATA_LAB_FUNCTIONS"]
        if project_type not in allowed_values:
            raise ValueError(
                "Invalid value for `project_type` ({0}), must be one of {1}"
                .format(project_type, allowed_values)
            )

        self._project_type = project_type

    @property
    def resource_size(self):
        """
        Gets the resource_size of this ProjectOutputV1.
        The size of the resources provisioned for this project. One of UI_S, GP_S (default), GP_M, ML_L, or ML_XL.   The values represent a combination of Purpose (represents the use-case and workload) and Size.  Purposes: UI = User Interaction, GP = General Purpose, ML = Machine Learning.  Sizes: S = Small, M = Medium, L = Large, XL = Extra Large.

        :return: The resource_size of this ProjectOutputV1.
        :rtype: str
        """
        return self._resource_size

    @resource_size.setter
    def resource_size(self, resource_size):
        """
        Sets the resource_size of this ProjectOutputV1.
        The size of the resources provisioned for this project. One of UI_S, GP_S (default), GP_M, ML_L, or ML_XL.   The values represent a combination of Purpose (represents the use-case and workload) and Size.  Purposes: UI = User Interaction, GP = General Purpose, ML = Machine Learning.  Sizes: S = Small, M = Medium, L = Large, XL = Extra Large.

        :param resource_size: The resource_size of this ProjectOutputV1.
        :type: str
        """
        allowed_values = ["UI_S", "GP_S", "GP_M", "ML_L", "ML_XL"]
        if resource_size not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_size` ({0}), must be one of {1}"
                .format(resource_size, allowed_values)
            )

        self._resource_size = resource_size

    @property
    def scheduled_notebooks(self):
        """
        Gets the scheduled_notebooks of this ProjectOutputV1.
        The scheduled notebooks within this Project

        :return: The scheduled_notebooks of this ProjectOutputV1.
        :rtype: list[ScheduledNotebookOutputV1]
        """
        return self._scheduled_notebooks

    @scheduled_notebooks.setter
    def scheduled_notebooks(self, scheduled_notebooks):
        """
        Sets the scheduled_notebooks of this ProjectOutputV1.
        The scheduled notebooks within this Project

        :param scheduled_notebooks: The scheduled_notebooks of this ProjectOutputV1.
        :type: list[ScheduledNotebookOutputV1]
        """

        self._scheduled_notebooks = scheduled_notebooks

    @property
    def status_message(self):
        """
        Gets the status_message of this ProjectOutputV1.
        A plain language status message with information about any issues that may have been encountered during an operation

        :return: The status_message of this ProjectOutputV1.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """
        Sets the status_message of this ProjectOutputV1.
        A plain language status message with information about any issues that may have been encountered during an operation

        :param status_message: The status_message of this ProjectOutputV1.
        :type: str
        """

        self._status_message = status_message

    @property
    def translation_key(self):
        """
        Gets the translation_key of this ProjectOutputV1.
        The item's translation key, if any

        :return: The translation_key of this ProjectOutputV1.
        :rtype: str
        """
        return self._translation_key

    @translation_key.setter
    def translation_key(self, translation_key):
        """
        Sets the translation_key of this ProjectOutputV1.
        The item's translation key, if any

        :param translation_key: The translation_key of this ProjectOutputV1.
        :type: str
        """

        self._translation_key = translation_key

    @property
    def type(self):
        """
        Gets the type of this ProjectOutputV1.
        The type of the item

        :return: The type of this ProjectOutputV1.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ProjectOutputV1.
        The type of the item

        :param type: The type of this ProjectOutputV1.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def updated_at(self):
        """
        Gets the updated_at of this ProjectOutputV1.
        The ISO 8601 date of when the folder, analysis, topic, or project was updated (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm)

        :return: The updated_at of this ProjectOutputV1.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this ProjectOutputV1.
        The ISO 8601 date of when the folder, analysis, topic, or project was updated (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm)

        :param updated_at: The updated_at of this ProjectOutputV1.
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ProjectOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
