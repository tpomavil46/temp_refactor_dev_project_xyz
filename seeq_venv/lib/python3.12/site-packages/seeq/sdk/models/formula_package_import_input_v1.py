# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class FormulaPackageImportInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'docs': 'list[FormulaDocInputV1]',
        'formula_package': 'FormulaPackageInputV1',
        'functions': 'list[FunctionInputV1]',
        'sync_token': 'str'
    }

    attribute_map = {
        'docs': 'docs',
        'formula_package': 'formulaPackage',
        'functions': 'functions',
        'sync_token': 'syncToken'
    }

    def __init__(self, docs=None, formula_package=None, functions=None, sync_token=None):
        """
        FormulaPackageImportInputV1 - a model defined in Swagger
        """

        self._docs = None
        self._formula_package = None
        self._functions = None
        self._sync_token = None

        if docs is not None:
          self.docs = docs
        if formula_package is not None:
          self.formula_package = formula_package
        if functions is not None:
          self.functions = functions
        if sync_token is not None:
          self.sync_token = sync_token

    @property
    def docs(self):
        """
        Gets the docs of this FormulaPackageImportInputV1.
        The list of docs to be added or modified

        :return: The docs of this FormulaPackageImportInputV1.
        :rtype: list[FormulaDocInputV1]
        """
        return self._docs

    @docs.setter
    def docs(self, docs):
        """
        Sets the docs of this FormulaPackageImportInputV1.
        The list of docs to be added or modified

        :param docs: The docs of this FormulaPackageImportInputV1.
        :type: list[FormulaDocInputV1]
        """
        if docs is None:
            raise ValueError("Invalid value for `docs`, must not be `None`")

        self._docs = docs

    @property
    def formula_package(self):
        """
        Gets the formula_package of this FormulaPackageImportInputV1.

        :return: The formula_package of this FormulaPackageImportInputV1.
        :rtype: FormulaPackageInputV1
        """
        return self._formula_package

    @formula_package.setter
    def formula_package(self, formula_package):
        """
        Sets the formula_package of this FormulaPackageImportInputV1.

        :param formula_package: The formula_package of this FormulaPackageImportInputV1.
        :type: FormulaPackageInputV1
        """
        if formula_package is None:
            raise ValueError("Invalid value for `formula_package`, must not be `None`")

        self._formula_package = formula_package

    @property
    def functions(self):
        """
        Gets the functions of this FormulaPackageImportInputV1.
        The list of functions to be added or modified

        :return: The functions of this FormulaPackageImportInputV1.
        :rtype: list[FunctionInputV1]
        """
        return self._functions

    @functions.setter
    def functions(self, functions):
        """
        Sets the functions of this FormulaPackageImportInputV1.
        The list of functions to be added or modified

        :param functions: The functions of this FormulaPackageImportInputV1.
        :type: list[FunctionInputV1]
        """
        if functions is None:
            raise ValueError("Invalid value for `functions`, must not be `None`")

        self._functions = functions

    @property
    def sync_token(self):
        """
        Gets the sync_token of this FormulaPackageImportInputV1.
        An arbitrary token (often a date or random ID) that is used during metadata syncs. At the end of a full sync, items with mismatching sync tokens are identified as stale and may be archived using the Datasources clean-up API. This token will be applied to the package, function, and doc items in this import overriding any token value that may have been set in those.

        :return: The sync_token of this FormulaPackageImportInputV1.
        :rtype: str
        """
        return self._sync_token

    @sync_token.setter
    def sync_token(self, sync_token):
        """
        Sets the sync_token of this FormulaPackageImportInputV1.
        An arbitrary token (often a date or random ID) that is used during metadata syncs. At the end of a full sync, items with mismatching sync tokens are identified as stale and may be archived using the Datasources clean-up API. This token will be applied to the package, function, and doc items in this import overriding any token value that may have been set in those.

        :param sync_token: The sync_token of this FormulaPackageImportInputV1.
        :type: str
        """

        self._sync_token = sync_token

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FormulaPackageImportInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
