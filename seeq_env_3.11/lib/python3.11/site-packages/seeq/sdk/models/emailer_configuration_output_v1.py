# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class EmailerConfigurationOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_number_of_attachments': 'int',
        'max_attachments_size_in_mb': 'float',
        'allowed_attachment_types': 'list[str]'
    }

    attribute_map = {
        'max_number_of_attachments': 'maxNumberOfAttachments',
        'max_attachments_size_in_mb': 'maxAttachmentsSizeInMB',
        'allowed_attachment_types': 'allowedAttachmentTypes'
    }

    def __init__(self, max_number_of_attachments=None, max_attachments_size_in_mb=None, allowed_attachment_types=None):
        """
        EmailerConfigurationOutputV1 - a model defined in Swagger
        """

        self._max_number_of_attachments = None
        self._max_attachments_size_in_mb = None
        self._allowed_attachment_types = None

        if max_number_of_attachments is not None:
          self.max_number_of_attachments = max_number_of_attachments
        if max_attachments_size_in_mb is not None:
          self.max_attachments_size_in_mb = max_attachments_size_in_mb
        if allowed_attachment_types is not None:
          self.allowed_attachment_types = allowed_attachment_types

    @property
    def max_number_of_attachments(self):
        """
        Gets the max_number_of_attachments of this EmailerConfigurationOutputV1.
        The maximum number of attachments allowed in an email.

        :return: The max_number_of_attachments of this EmailerConfigurationOutputV1.
        :rtype: int
        """
        return self._max_number_of_attachments

    @max_number_of_attachments.setter
    def max_number_of_attachments(self, max_number_of_attachments):
        """
        Sets the max_number_of_attachments of this EmailerConfigurationOutputV1.
        The maximum number of attachments allowed in an email.

        :param max_number_of_attachments: The max_number_of_attachments of this EmailerConfigurationOutputV1.
        :type: int
        """
        if max_number_of_attachments is None:
            raise ValueError("Invalid value for `max_number_of_attachments`, must not be `None`")

        self._max_number_of_attachments = max_number_of_attachments

    @property
    def max_attachments_size_in_mb(self):
        """
        Gets the max_attachments_size_in_mb of this EmailerConfigurationOutputV1.
        The maximum size, in megabytes, for all attachments in an email.

        :return: The max_attachments_size_in_mb of this EmailerConfigurationOutputV1.
        :rtype: float
        """
        return self._max_attachments_size_in_mb

    @max_attachments_size_in_mb.setter
    def max_attachments_size_in_mb(self, max_attachments_size_in_mb):
        """
        Sets the max_attachments_size_in_mb of this EmailerConfigurationOutputV1.
        The maximum size, in megabytes, for all attachments in an email.

        :param max_attachments_size_in_mb: The max_attachments_size_in_mb of this EmailerConfigurationOutputV1.
        :type: float
        """
        if max_attachments_size_in_mb is None:
            raise ValueError("Invalid value for `max_attachments_size_in_mb`, must not be `None`")

        self._max_attachments_size_in_mb = max_attachments_size_in_mb

    @property
    def allowed_attachment_types(self):
        """
        Gets the allowed_attachment_types of this EmailerConfigurationOutputV1.
        The list of allowed MIME types for attachments

        :return: The allowed_attachment_types of this EmailerConfigurationOutputV1.
        :rtype: list[str]
        """
        return self._allowed_attachment_types

    @allowed_attachment_types.setter
    def allowed_attachment_types(self, allowed_attachment_types):
        """
        Sets the allowed_attachment_types of this EmailerConfigurationOutputV1.
        The list of allowed MIME types for attachments

        :param allowed_attachment_types: The allowed_attachment_types of this EmailerConfigurationOutputV1.
        :type: list[str]
        """
        if allowed_attachment_types is None:
            raise ValueError("Invalid value for `allowed_attachment_types`, must not be `None`")

        self._allowed_attachment_types = allowed_attachment_types

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EmailerConfigurationOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
