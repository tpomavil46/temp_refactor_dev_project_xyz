# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class DateRangeInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'archived': 'bool',
        'background': 'bool',
        'condition_id': 'str',
        'cron_schedule': 'list[str]',
        'description': 'str',
        'enabled': 'bool',
        'formula': 'str',
        'name': 'str',
        'report_id': 'str'
    }

    attribute_map = {
        'archived': 'archived',
        'background': 'background',
        'condition_id': 'conditionId',
        'cron_schedule': 'cronSchedule',
        'description': 'description',
        'enabled': 'enabled',
        'formula': 'formula',
        'name': 'name',
        'report_id': 'reportId'
    }

    def __init__(self, archived=False, background=False, condition_id=None, cron_schedule=None, description=None, enabled=True, formula=None, name=None, report_id=None):
        """
        DateRangeInputV1 - a model defined in Swagger
        """

        self._archived = None
        self._background = None
        self._condition_id = None
        self._cron_schedule = None
        self._description = None
        self._enabled = None
        self._formula = None
        self._name = None
        self._report_id = None

        if archived is not None:
          self.archived = archived
        if background is not None:
          self.background = background
        if condition_id is not None:
          self.condition_id = condition_id
        if cron_schedule is not None:
          self.cron_schedule = cron_schedule
        if description is not None:
          self.description = description
        if enabled is not None:
          self.enabled = enabled
        if formula is not None:
          self.formula = formula
        if name is not None:
          self.name = name
        if report_id is not None:
          self.report_id = report_id

    @property
    def archived(self):
        """
        Gets the archived of this DateRangeInputV1.
        Whether the date range should be archived

        :return: The archived of this DateRangeInputV1.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """
        Sets the archived of this DateRangeInputV1.
        Whether the date range should be archived

        :param archived: The archived of this DateRangeInputV1.
        :type: bool
        """

        self._archived = archived

    @property
    def background(self):
        """
        Gets the background of this DateRangeInputV1.
        Whether the date range, if scheduled, should continue to update if there are no subscribers (i.e. in the background)

        :return: The background of this DateRangeInputV1.
        :rtype: bool
        """
        return self._background

    @background.setter
    def background(self, background):
        """
        Sets the background of this DateRangeInputV1.
        Whether the date range, if scheduled, should continue to update if there are no subscribers (i.e. in the background)

        :param background: The background of this DateRangeInputV1.
        :type: bool
        """

        self._background = background

    @property
    def condition_id(self):
        """
        Gets the condition_id of this DateRangeInputV1.
        The date range's condition

        :return: The condition_id of this DateRangeInputV1.
        :rtype: str
        """
        return self._condition_id

    @condition_id.setter
    def condition_id(self, condition_id):
        """
        Sets the condition_id of this DateRangeInputV1.
        The date range's condition

        :param condition_id: The condition_id of this DateRangeInputV1.
        :type: str
        """

        self._condition_id = condition_id

    @property
    def cron_schedule(self):
        """
        Gets the cron_schedule of this DateRangeInputV1.
        The date range's update schedule as a cron expression (see http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html)

        :return: The cron_schedule of this DateRangeInputV1.
        :rtype: list[str]
        """
        return self._cron_schedule

    @cron_schedule.setter
    def cron_schedule(self, cron_schedule):
        """
        Sets the cron_schedule of this DateRangeInputV1.
        The date range's update schedule as a cron expression (see http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html)

        :param cron_schedule: The cron_schedule of this DateRangeInputV1.
        :type: list[str]
        """

        self._cron_schedule = cron_schedule

    @property
    def description(self):
        """
        Gets the description of this DateRangeInputV1.
        The date range's description

        :return: The description of this DateRangeInputV1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this DateRangeInputV1.
        The date range's description

        :param description: The description of this DateRangeInputV1.
        :type: str
        """

        self._description = description

    @property
    def enabled(self):
        """
        Gets the enabled of this DateRangeInputV1.
        Whether the date range is enabled to run jobs

        :return: The enabled of this DateRangeInputV1.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this DateRangeInputV1.
        Whether the date range is enabled to run jobs

        :param enabled: The enabled of this DateRangeInputV1.
        :type: bool
        """

        self._enabled = enabled

    @property
    def formula(self):
        """
        Gets the formula of this DateRangeInputV1.
        The date range's formula

        :return: The formula of this DateRangeInputV1.
        :rtype: str
        """
        return self._formula

    @formula.setter
    def formula(self, formula):
        """
        Sets the formula of this DateRangeInputV1.
        The date range's formula

        :param formula: The formula of this DateRangeInputV1.
        :type: str
        """
        if formula is None:
            raise ValueError("Invalid value for `formula`, must not be `None`")

        self._formula = formula

    @property
    def name(self):
        """
        Gets the name of this DateRangeInputV1.
        The date range's name

        :return: The name of this DateRangeInputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DateRangeInputV1.
        The date range's name

        :param name: The name of this DateRangeInputV1.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def report_id(self):
        """
        Gets the report_id of this DateRangeInputV1.
        The date range's report

        :return: The report_id of this DateRangeInputV1.
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """
        Sets the report_id of this DateRangeInputV1.
        The date range's report

        :param report_id: The report_id of this DateRangeInputV1.
        :type: str
        """

        self._report_id = report_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DateRangeInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
