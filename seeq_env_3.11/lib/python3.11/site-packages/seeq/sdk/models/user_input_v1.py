# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class UserInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_key_validity_duration': 'int',
        'data_id': 'str',
        'datasource_class': 'str',
        'datasource_id': 'str',
        'description': 'str',
        'email': 'str',
        'first_name': 'str',
        'is_admin': 'bool',
        'is_enabled': 'bool',
        'last_name': 'str',
        'manager': 'str',
        'max_requests': 'int',
        'name': 'str',
        'password': 'str',
        'require_password_reset_on_next_login': 'bool',
        'role': 'str',
        'session_duration': 'int',
        'site': 'str',
        'template_workstep_id': 'str',
        'username': 'str',
        'workbench': 'str'
    }

    attribute_map = {
        'access_key_validity_duration': 'accessKeyValidityDuration',
        'data_id': 'dataId',
        'datasource_class': 'datasourceClass',
        'datasource_id': 'datasourceId',
        'description': 'description',
        'email': 'email',
        'first_name': 'firstName',
        'is_admin': 'isAdmin',
        'is_enabled': 'isEnabled',
        'last_name': 'lastName',
        'manager': 'manager',
        'max_requests': 'maxRequests',
        'name': 'name',
        'password': 'password',
        'require_password_reset_on_next_login': 'requirePasswordResetOnNextLogin',
        'role': 'role',
        'session_duration': 'sessionDuration',
        'site': 'site',
        'template_workstep_id': 'templateWorkstepId',
        'username': 'username',
        'workbench': 'workbench'
    }

    def __init__(self, access_key_validity_duration=None, data_id=None, datasource_class=None, datasource_id=None, description=None, email=None, first_name=None, is_admin=None, is_enabled=None, last_name=None, manager=None, max_requests=None, name=None, password=None, require_password_reset_on_next_login=None, role=None, session_duration=None, site=None, template_workstep_id=None, username=None, workbench=None):
        """
        UserInputV1 - a model defined in Swagger
        """

        self._access_key_validity_duration = None
        self._data_id = None
        self._datasource_class = None
        self._datasource_id = None
        self._description = None
        self._email = None
        self._first_name = None
        self._is_admin = None
        self._is_enabled = None
        self._last_name = None
        self._manager = None
        self._max_requests = None
        self._name = None
        self._password = None
        self._require_password_reset_on_next_login = None
        self._role = None
        self._session_duration = None
        self._site = None
        self._template_workstep_id = None
        self._username = None
        self._workbench = None

        if access_key_validity_duration is not None:
          self.access_key_validity_duration = access_key_validity_duration
        if data_id is not None:
          self.data_id = data_id
        if datasource_class is not None:
          self.datasource_class = datasource_class
        if datasource_id is not None:
          self.datasource_id = datasource_id
        if description is not None:
          self.description = description
        if email is not None:
          self.email = email
        if first_name is not None:
          self.first_name = first_name
        if is_admin is not None:
          self.is_admin = is_admin
        if is_enabled is not None:
          self.is_enabled = is_enabled
        if last_name is not None:
          self.last_name = last_name
        if manager is not None:
          self.manager = manager
        if max_requests is not None:
          self.max_requests = max_requests
        if name is not None:
          self.name = name
        if password is not None:
          self.password = password
        if require_password_reset_on_next_login is not None:
          self.require_password_reset_on_next_login = require_password_reset_on_next_login
        if role is not None:
          self.role = role
        if session_duration is not None:
          self.session_duration = session_duration
        if site is not None:
          self.site = site
        if template_workstep_id is not None:
          self.template_workstep_id = template_workstep_id
        if username is not None:
          self.username = username
        if workbench is not None:
          self.workbench = workbench

    @property
    def access_key_validity_duration(self):
        """
        Gets the access_key_validity_duration of this UserInputV1.
        The duration, in minutes, to override the 'Authentication/AccessKey/ValidityWithoutUserLogin' configuration. After the last user activity, authentication is allowed with an access key for the period specified here. A value of 0 will effectively disable access keys for this user. A negative value removes the override, defaulting this user back to the system config.

        :return: The access_key_validity_duration of this UserInputV1.
        :rtype: int
        """
        return self._access_key_validity_duration

    @access_key_validity_duration.setter
    def access_key_validity_duration(self, access_key_validity_duration):
        """
        Sets the access_key_validity_duration of this UserInputV1.
        The duration, in minutes, to override the 'Authentication/AccessKey/ValidityWithoutUserLogin' configuration. After the last user activity, authentication is allowed with an access key for the period specified here. A value of 0 will effectively disable access keys for this user. A negative value removes the override, defaulting this user back to the system config.

        :param access_key_validity_duration: The access_key_validity_duration of this UserInputV1.
        :type: int
        """

        self._access_key_validity_duration = access_key_validity_duration

    @property
    def data_id(self):
        """
        Gets the data_id of this UserInputV1.
        The unique identifier of this user within the datasource. Leave null to use the username as the Data ID.

        :return: The data_id of this UserInputV1.
        :rtype: str
        """
        return self._data_id

    @data_id.setter
    def data_id(self, data_id):
        """
        Sets the data_id of this UserInputV1.
        The unique identifier of this user within the datasource. Leave null to use the username as the Data ID.

        :param data_id: The data_id of this UserInputV1.
        :type: str
        """

        self._data_id = data_id

    @property
    def datasource_class(self):
        """
        Gets the datasource_class of this UserInputV1.
        The class of the auth provider for this user. Leave null to use the Seeq datasource.

        :return: The datasource_class of this UserInputV1.
        :rtype: str
        """
        return self._datasource_class

    @datasource_class.setter
    def datasource_class(self, datasource_class):
        """
        Sets the datasource_class of this UserInputV1.
        The class of the auth provider for this user. Leave null to use the Seeq datasource.

        :param datasource_class: The datasource_class of this UserInputV1.
        :type: str
        """

        self._datasource_class = datasource_class

    @property
    def datasource_id(self):
        """
        Gets the datasource_id of this UserInputV1.
        Along with the Datasource Class, the Datasource ID uniquely identifies a datasource. For example, a datasource may be a particular instance of an Active Directory. Leave null to use the Seeq datasource.

        :return: The datasource_id of this UserInputV1.
        :rtype: str
        """
        return self._datasource_id

    @datasource_id.setter
    def datasource_id(self, datasource_id):
        """
        Sets the datasource_id of this UserInputV1.
        Along with the Datasource Class, the Datasource ID uniquely identifies a datasource. For example, a datasource may be a particular instance of an Active Directory. Leave null to use the Seeq datasource.

        :param datasource_id: The datasource_id of this UserInputV1.
        :type: str
        """

        self._datasource_id = datasource_id

    @property
    def description(self):
        """
        Gets the description of this UserInputV1.
        Clarifying information or other plain language description of this item. An input of just whitespaces is equivalent to a null input.

        :return: The description of this UserInputV1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this UserInputV1.
        Clarifying information or other plain language description of this item. An input of just whitespaces is equivalent to a null input.

        :param description: The description of this UserInputV1.
        :type: str
        """

        self._description = description

    @property
    def email(self):
        """
        Gets the email of this UserInputV1.
        The email address of the user

        :return: The email of this UserInputV1.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this UserInputV1.
        The email address of the user

        :param email: The email of this UserInputV1.
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this UserInputV1.
        The first name of the user

        :return: The first_name of this UserInputV1.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this UserInputV1.
        The first name of the user

        :param first_name: The first_name of this UserInputV1.
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def is_admin(self):
        """
        Gets the is_admin of this UserInputV1.
        Whether or not the user is an administrator.

        :return: The is_admin of this UserInputV1.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """
        Sets the is_admin of this UserInputV1.
        Whether or not the user is an administrator.

        :param is_admin: The is_admin of this UserInputV1.
        :type: bool
        """

        self._is_admin = is_admin

    @property
    def is_enabled(self):
        """
        Gets the is_enabled of this UserInputV1.
        Whether the user is enabled or disabled.

        :return: The is_enabled of this UserInputV1.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """
        Sets the is_enabled of this UserInputV1.
        Whether the user is enabled or disabled.

        :param is_enabled: The is_enabled of this UserInputV1.
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def last_name(self):
        """
        Gets the last_name of this UserInputV1.
        The last name of the user

        :return: The last_name of this UserInputV1.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this UserInputV1.
        The last name of the user

        :param last_name: The last_name of this UserInputV1.
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def manager(self):
        """
        Gets the manager of this UserInputV1.
        The ID of the manager for this user.

        :return: The manager of this UserInputV1.
        :rtype: str
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """
        Sets the manager of this UserInputV1.
        The ID of the manager for this user.

        :param manager: The manager of this UserInputV1.
        :type: str
        """

        self._manager = manager

    @property
    def max_requests(self):
        """
        Gets the max_requests of this UserInputV1.
        The maximum allowed simultaneous requests for this user. Overrides the 'Threads/HttpServer/MaxRequestsPerUser' configuration. A negative value removes the override, defaulting this user back to the system config.

        :return: The max_requests of this UserInputV1.
        :rtype: int
        """
        return self._max_requests

    @max_requests.setter
    def max_requests(self, max_requests):
        """
        Sets the max_requests of this UserInputV1.
        The maximum allowed simultaneous requests for this user. Overrides the 'Threads/HttpServer/MaxRequestsPerUser' configuration. A negative value removes the override, defaulting this user back to the system config.

        :param max_requests: The max_requests of this UserInputV1.
        :type: int
        """

        self._max_requests = max_requests

    @property
    def name(self):
        """
        Gets the name of this UserInputV1.
        Human readable name. Null or whitespace names are not permitted. Defaults to a concatenation of the first and last name

        :return: The name of this UserInputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this UserInputV1.
        Human readable name. Null or whitespace names are not permitted. Defaults to a concatenation of the first and last name

        :param name: The name of this UserInputV1.
        :type: str
        """

        self._name = name

    @property
    def password(self):
        """
        Gets the password of this UserInputV1.
        The password of the user. Required for users in the Seeq datasource.

        :return: The password of this UserInputV1.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this UserInputV1.
        The password of the user. Required for users in the Seeq datasource.

        :param password: The password of this UserInputV1.
        :type: str
        """

        self._password = password

    @property
    def require_password_reset_on_next_login(self):
        """
        Gets the require_password_reset_on_next_login of this UserInputV1.
        Determines if this user is required to change their password on their next successful log in.

        :return: The require_password_reset_on_next_login of this UserInputV1.
        :rtype: bool
        """
        return self._require_password_reset_on_next_login

    @require_password_reset_on_next_login.setter
    def require_password_reset_on_next_login(self, require_password_reset_on_next_login):
        """
        Sets the require_password_reset_on_next_login of this UserInputV1.
        Determines if this user is required to change their password on their next successful log in.

        :param require_password_reset_on_next_login: The require_password_reset_on_next_login of this UserInputV1.
        :type: bool
        """

        self._require_password_reset_on_next_login = require_password_reset_on_next_login

    @property
    def role(self):
        """
        Gets the role of this UserInputV1.
        The user's role.

        :return: The role of this UserInputV1.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """
        Sets the role of this UserInputV1.
        The user's role.

        :param role: The role of this UserInputV1.
        :type: str
        """

        self._role = role

    @property
    def session_duration(self):
        """
        Gets the session_duration of this UserInputV1.
        The session duration, in minutes, to override the 'Authentication/DefaultSessionDuration' configuration. This controls the maximum period of inactivity before the user must authenticate again. A zero or negative value removes the override, defaulting this user back to the system config.

        :return: The session_duration of this UserInputV1.
        :rtype: int
        """
        return self._session_duration

    @session_duration.setter
    def session_duration(self, session_duration):
        """
        Sets the session_duration of this UserInputV1.
        The session duration, in minutes, to override the 'Authentication/DefaultSessionDuration' configuration. This controls the maximum period of inactivity before the user must authenticate again. A zero or negative value removes the override, defaulting this user back to the system config.

        :param session_duration: The session_duration of this UserInputV1.
        :type: int
        """

        self._session_duration = session_duration

    @property
    def site(self):
        """
        Gets the site of this UserInputV1.
        The Site a user is assigned to.

        :return: The site of this UserInputV1.
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """
        Sets the site of this UserInputV1.
        The Site a user is assigned to.

        :param site: The site of this UserInputV1.
        :type: str
        """

        self._site = site

    @property
    def template_workstep_id(self):
        """
        Gets the template_workstep_id of this UserInputV1.
        ID of the Workstep that is used as the template for any worksheets created by this user after setting this field. Use empty guid (00000000-0000-0000-0000-000000000000) to clear the template workstep and reset to Seeq's default worksheet configuration.

        :return: The template_workstep_id of this UserInputV1.
        :rtype: str
        """
        return self._template_workstep_id

    @template_workstep_id.setter
    def template_workstep_id(self, template_workstep_id):
        """
        Sets the template_workstep_id of this UserInputV1.
        ID of the Workstep that is used as the template for any worksheets created by this user after setting this field. Use empty guid (00000000-0000-0000-0000-000000000000) to clear the template workstep and reset to Seeq's default worksheet configuration.

        :param template_workstep_id: The template_workstep_id of this UserInputV1.
        :type: str
        """

        self._template_workstep_id = template_workstep_id

    @property
    def username(self):
        """
        Gets the username of this UserInputV1.
        The username of the user. Required for users from an external directory such as LDAP or Windows Authentication.

        :return: The username of this UserInputV1.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this UserInputV1.
        The username of the user. Required for users from an external directory such as LDAP or Windows Authentication.

        :param username: The username of this UserInputV1.
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def workbench(self):
        """
        Gets the workbench of this UserInputV1.
        The workbench configuration of this user.

        :return: The workbench of this UserInputV1.
        :rtype: str
        """
        return self._workbench

    @workbench.setter
    def workbench(self, workbench):
        """
        Sets the workbench of this UserInputV1.
        The workbench configuration of this user.

        :param workbench: The workbench of this UserInputV1.
        :type: str
        """

        self._workbench = workbench

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
