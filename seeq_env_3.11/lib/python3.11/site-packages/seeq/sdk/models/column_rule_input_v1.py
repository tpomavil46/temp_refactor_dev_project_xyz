# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ColumnRuleInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ancestor': 'ColumnRuleAncestorInputV1',
        'asset_creator': 'ColumnRuleAssetCreatorInputV1',
        'concat_columns': 'ColumnRuleConcatInputV1',
        'constant': 'ColumnRuleConstantInputV1',
        'descendant': 'ColumnRuleDescendantInputV1',
        'event_property': 'ColumnRuleEventPropertyInputV1',
        'formula_creator': 'ColumnRuleFormulaCreatorInputV1',
        'get_item_property': 'ColumnRuleGetItemPropertyInputV1',
        'item_search': 'ColumnRuleItemSearchInputV1',
        'manager': 'ColumnRuleManagerInputV1',
        'path': 'ColumnRulePathInputV1',
        'path_search': 'ColumnRulePathSearchInputV1',
        'scalar_creator': 'ColumnRuleScalarCreatorInputV1',
        'set_item_property': 'ColumnRuleSetItemPropertyInputV1',
        'text_extractor': 'ColumnRuleTextExtractorInputV1',
        'text_replacement': 'ColumnRuleTextReplacementInputV1',
        'tree_path_creator': 'ColumnRuleTreePathCreatorInputV1'
    }

    attribute_map = {
        'ancestor': 'ancestor',
        'asset_creator': 'assetCreator',
        'concat_columns': 'concatColumns',
        'constant': 'constant',
        'descendant': 'descendant',
        'event_property': 'eventProperty',
        'formula_creator': 'formulaCreator',
        'get_item_property': 'getItemProperty',
        'item_search': 'itemSearch',
        'manager': 'manager',
        'path': 'path',
        'path_search': 'pathSearch',
        'scalar_creator': 'scalarCreator',
        'set_item_property': 'setItemProperty',
        'text_extractor': 'textExtractor',
        'text_replacement': 'textReplacement',
        'tree_path_creator': 'treePathCreator'
    }

    def __init__(self, ancestor=None, asset_creator=None, concat_columns=None, constant=None, descendant=None, event_property=None, formula_creator=None, get_item_property=None, item_search=None, manager=None, path=None, path_search=None, scalar_creator=None, set_item_property=None, text_extractor=None, text_replacement=None, tree_path_creator=None):
        """
        ColumnRuleInputV1 - a model defined in Swagger
        """

        self._ancestor = None
        self._asset_creator = None
        self._concat_columns = None
        self._constant = None
        self._descendant = None
        self._event_property = None
        self._formula_creator = None
        self._get_item_property = None
        self._item_search = None
        self._manager = None
        self._path = None
        self._path_search = None
        self._scalar_creator = None
        self._set_item_property = None
        self._text_extractor = None
        self._text_replacement = None
        self._tree_path_creator = None

        if ancestor is not None:
          self.ancestor = ancestor
        if asset_creator is not None:
          self.asset_creator = asset_creator
        if concat_columns is not None:
          self.concat_columns = concat_columns
        if constant is not None:
          self.constant = constant
        if descendant is not None:
          self.descendant = descendant
        if event_property is not None:
          self.event_property = event_property
        if formula_creator is not None:
          self.formula_creator = formula_creator
        if get_item_property is not None:
          self.get_item_property = get_item_property
        if item_search is not None:
          self.item_search = item_search
        if manager is not None:
          self.manager = manager
        if path is not None:
          self.path = path
        if path_search is not None:
          self.path_search = path_search
        if scalar_creator is not None:
          self.scalar_creator = scalar_creator
        if set_item_property is not None:
          self.set_item_property = set_item_property
        if text_extractor is not None:
          self.text_extractor = text_extractor
        if text_replacement is not None:
          self.text_replacement = text_replacement
        if tree_path_creator is not None:
          self.tree_path_creator = tree_path_creator

    @property
    def ancestor(self):
        """
        Gets the ancestor of this ColumnRuleInputV1.

        :return: The ancestor of this ColumnRuleInputV1.
        :rtype: ColumnRuleAncestorInputV1
        """
        return self._ancestor

    @ancestor.setter
    def ancestor(self, ancestor):
        """
        Sets the ancestor of this ColumnRuleInputV1.

        :param ancestor: The ancestor of this ColumnRuleInputV1.
        :type: ColumnRuleAncestorInputV1
        """

        self._ancestor = ancestor

    @property
    def asset_creator(self):
        """
        Gets the asset_creator of this ColumnRuleInputV1.

        :return: The asset_creator of this ColumnRuleInputV1.
        :rtype: ColumnRuleAssetCreatorInputV1
        """
        return self._asset_creator

    @asset_creator.setter
    def asset_creator(self, asset_creator):
        """
        Sets the asset_creator of this ColumnRuleInputV1.

        :param asset_creator: The asset_creator of this ColumnRuleInputV1.
        :type: ColumnRuleAssetCreatorInputV1
        """

        self._asset_creator = asset_creator

    @property
    def concat_columns(self):
        """
        Gets the concat_columns of this ColumnRuleInputV1.

        :return: The concat_columns of this ColumnRuleInputV1.
        :rtype: ColumnRuleConcatInputV1
        """
        return self._concat_columns

    @concat_columns.setter
    def concat_columns(self, concat_columns):
        """
        Sets the concat_columns of this ColumnRuleInputV1.

        :param concat_columns: The concat_columns of this ColumnRuleInputV1.
        :type: ColumnRuleConcatInputV1
        """

        self._concat_columns = concat_columns

    @property
    def constant(self):
        """
        Gets the constant of this ColumnRuleInputV1.

        :return: The constant of this ColumnRuleInputV1.
        :rtype: ColumnRuleConstantInputV1
        """
        return self._constant

    @constant.setter
    def constant(self, constant):
        """
        Sets the constant of this ColumnRuleInputV1.

        :param constant: The constant of this ColumnRuleInputV1.
        :type: ColumnRuleConstantInputV1
        """

        self._constant = constant

    @property
    def descendant(self):
        """
        Gets the descendant of this ColumnRuleInputV1.

        :return: The descendant of this ColumnRuleInputV1.
        :rtype: ColumnRuleDescendantInputV1
        """
        return self._descendant

    @descendant.setter
    def descendant(self, descendant):
        """
        Sets the descendant of this ColumnRuleInputV1.

        :param descendant: The descendant of this ColumnRuleInputV1.
        :type: ColumnRuleDescendantInputV1
        """

        self._descendant = descendant

    @property
    def event_property(self):
        """
        Gets the event_property of this ColumnRuleInputV1.

        :return: The event_property of this ColumnRuleInputV1.
        :rtype: ColumnRuleEventPropertyInputV1
        """
        return self._event_property

    @event_property.setter
    def event_property(self, event_property):
        """
        Sets the event_property of this ColumnRuleInputV1.

        :param event_property: The event_property of this ColumnRuleInputV1.
        :type: ColumnRuleEventPropertyInputV1
        """

        self._event_property = event_property

    @property
    def formula_creator(self):
        """
        Gets the formula_creator of this ColumnRuleInputV1.

        :return: The formula_creator of this ColumnRuleInputV1.
        :rtype: ColumnRuleFormulaCreatorInputV1
        """
        return self._formula_creator

    @formula_creator.setter
    def formula_creator(self, formula_creator):
        """
        Sets the formula_creator of this ColumnRuleInputV1.

        :param formula_creator: The formula_creator of this ColumnRuleInputV1.
        :type: ColumnRuleFormulaCreatorInputV1
        """

        self._formula_creator = formula_creator

    @property
    def get_item_property(self):
        """
        Gets the get_item_property of this ColumnRuleInputV1.

        :return: The get_item_property of this ColumnRuleInputV1.
        :rtype: ColumnRuleGetItemPropertyInputV1
        """
        return self._get_item_property

    @get_item_property.setter
    def get_item_property(self, get_item_property):
        """
        Sets the get_item_property of this ColumnRuleInputV1.

        :param get_item_property: The get_item_property of this ColumnRuleInputV1.
        :type: ColumnRuleGetItemPropertyInputV1
        """

        self._get_item_property = get_item_property

    @property
    def item_search(self):
        """
        Gets the item_search of this ColumnRuleInputV1.

        :return: The item_search of this ColumnRuleInputV1.
        :rtype: ColumnRuleItemSearchInputV1
        """
        return self._item_search

    @item_search.setter
    def item_search(self, item_search):
        """
        Sets the item_search of this ColumnRuleInputV1.

        :param item_search: The item_search of this ColumnRuleInputV1.
        :type: ColumnRuleItemSearchInputV1
        """

        self._item_search = item_search

    @property
    def manager(self):
        """
        Gets the manager of this ColumnRuleInputV1.

        :return: The manager of this ColumnRuleInputV1.
        :rtype: ColumnRuleManagerInputV1
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """
        Sets the manager of this ColumnRuleInputV1.

        :param manager: The manager of this ColumnRuleInputV1.
        :type: ColumnRuleManagerInputV1
        """

        self._manager = manager

    @property
    def path(self):
        """
        Gets the path of this ColumnRuleInputV1.

        :return: The path of this ColumnRuleInputV1.
        :rtype: ColumnRulePathInputV1
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this ColumnRuleInputV1.

        :param path: The path of this ColumnRuleInputV1.
        :type: ColumnRulePathInputV1
        """

        self._path = path

    @property
    def path_search(self):
        """
        Gets the path_search of this ColumnRuleInputV1.

        :return: The path_search of this ColumnRuleInputV1.
        :rtype: ColumnRulePathSearchInputV1
        """
        return self._path_search

    @path_search.setter
    def path_search(self, path_search):
        """
        Sets the path_search of this ColumnRuleInputV1.

        :param path_search: The path_search of this ColumnRuleInputV1.
        :type: ColumnRulePathSearchInputV1
        """

        self._path_search = path_search

    @property
    def scalar_creator(self):
        """
        Gets the scalar_creator of this ColumnRuleInputV1.

        :return: The scalar_creator of this ColumnRuleInputV1.
        :rtype: ColumnRuleScalarCreatorInputV1
        """
        return self._scalar_creator

    @scalar_creator.setter
    def scalar_creator(self, scalar_creator):
        """
        Sets the scalar_creator of this ColumnRuleInputV1.

        :param scalar_creator: The scalar_creator of this ColumnRuleInputV1.
        :type: ColumnRuleScalarCreatorInputV1
        """

        self._scalar_creator = scalar_creator

    @property
    def set_item_property(self):
        """
        Gets the set_item_property of this ColumnRuleInputV1.

        :return: The set_item_property of this ColumnRuleInputV1.
        :rtype: ColumnRuleSetItemPropertyInputV1
        """
        return self._set_item_property

    @set_item_property.setter
    def set_item_property(self, set_item_property):
        """
        Sets the set_item_property of this ColumnRuleInputV1.

        :param set_item_property: The set_item_property of this ColumnRuleInputV1.
        :type: ColumnRuleSetItemPropertyInputV1
        """

        self._set_item_property = set_item_property

    @property
    def text_extractor(self):
        """
        Gets the text_extractor of this ColumnRuleInputV1.

        :return: The text_extractor of this ColumnRuleInputV1.
        :rtype: ColumnRuleTextExtractorInputV1
        """
        return self._text_extractor

    @text_extractor.setter
    def text_extractor(self, text_extractor):
        """
        Sets the text_extractor of this ColumnRuleInputV1.

        :param text_extractor: The text_extractor of this ColumnRuleInputV1.
        :type: ColumnRuleTextExtractorInputV1
        """

        self._text_extractor = text_extractor

    @property
    def text_replacement(self):
        """
        Gets the text_replacement of this ColumnRuleInputV1.

        :return: The text_replacement of this ColumnRuleInputV1.
        :rtype: ColumnRuleTextReplacementInputV1
        """
        return self._text_replacement

    @text_replacement.setter
    def text_replacement(self, text_replacement):
        """
        Sets the text_replacement of this ColumnRuleInputV1.

        :param text_replacement: The text_replacement of this ColumnRuleInputV1.
        :type: ColumnRuleTextReplacementInputV1
        """

        self._text_replacement = text_replacement

    @property
    def tree_path_creator(self):
        """
        Gets the tree_path_creator of this ColumnRuleInputV1.

        :return: The tree_path_creator of this ColumnRuleInputV1.
        :rtype: ColumnRuleTreePathCreatorInputV1
        """
        return self._tree_path_creator

    @tree_path_creator.setter
    def tree_path_creator(self, tree_path_creator):
        """
        Sets the tree_path_creator of this ColumnRuleInputV1.

        :param tree_path_creator: The tree_path_creator of this ColumnRuleInputV1.
        :type: ColumnRuleTreePathCreatorInputV1
        """

        self._tree_path_creator = tree_path_creator

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ColumnRuleInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
