# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ScimTokenOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_token': 'str',
        'expiration': 'str'
    }

    attribute_map = {
        'auth_token': 'authToken',
        'expiration': 'expiration'
    }

    def __init__(self, auth_token=None, expiration=None):
        """
        ScimTokenOutputV1 - a model defined in Swagger
        """

        self._auth_token = None
        self._expiration = None

        if auth_token is not None:
          self.auth_token = auth_token
        if expiration is not None:
          self.expiration = expiration

    @property
    def auth_token(self):
        """
        Gets the auth_token of this ScimTokenOutputV1.
        The authentication token provided immediately upon generation; a placeholder on the GET response.

        :return: The auth_token of this ScimTokenOutputV1.
        :rtype: str
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token):
        """
        Sets the auth_token of this ScimTokenOutputV1.
        The authentication token provided immediately upon generation; a placeholder on the GET response.

        :param auth_token: The auth_token of this ScimTokenOutputV1.
        :type: str
        """

        self._auth_token = auth_token

    @property
    def expiration(self):
        """
        Gets the expiration of this ScimTokenOutputV1.
        The ISO 8601 date of when the token will expire (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm).

        :return: The expiration of this ScimTokenOutputV1.
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """
        Sets the expiration of this ScimTokenOutputV1.
        The ISO 8601 date of when the token will expire (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm).

        :param expiration: The expiration of this ScimTokenOutputV1.
        :type: str
        """

        self._expiration = expiration

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ScimTokenOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
