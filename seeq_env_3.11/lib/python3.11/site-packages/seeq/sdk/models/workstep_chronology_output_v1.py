# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class WorkstepChronologyOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'direction': 'str',
        'entries': 'list[WorkstepChronologyEntryV1]',
        'from_workstep_id': 'str'
    }

    attribute_map = {
        'direction': 'direction',
        'entries': 'entries',
        'from_workstep_id': 'fromWorkstepId'
    }

    def __init__(self, direction=None, entries=None, from_workstep_id=None):
        """
        WorkstepChronologyOutputV1 - a model defined in Swagger
        """

        self._direction = None
        self._entries = None
        self._from_workstep_id = None

        if direction is not None:
          self.direction = direction
        if entries is not None:
          self.entries = entries
        if from_workstep_id is not None:
          self.from_workstep_id = from_workstep_id

    @property
    def direction(self):
        """
        Gets the direction of this WorkstepChronologyOutputV1.
        The direction of the chronology relative to the given starting workstep (before or after).

        :return: The direction of this WorkstepChronologyOutputV1.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """
        Sets the direction of this WorkstepChronologyOutputV1.
        The direction of the chronology relative to the given starting workstep (before or after).

        :param direction: The direction of this WorkstepChronologyOutputV1.
        :type: str
        """
        allowed_values = ["Before", "After"]
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def entries(self):
        """
        Gets the entries of this WorkstepChronologyOutputV1.
        The list of workstep chronology entries.

        :return: The entries of this WorkstepChronologyOutputV1.
        :rtype: list[WorkstepChronologyEntryV1]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """
        Sets the entries of this WorkstepChronologyOutputV1.
        The list of workstep chronology entries.

        :param entries: The entries of this WorkstepChronologyOutputV1.
        :type: list[WorkstepChronologyEntryV1]
        """

        self._entries = entries

    @property
    def from_workstep_id(self):
        """
        Gets the from_workstep_id of this WorkstepChronologyOutputV1.
        The workstep ID from which the chronology starts.

        :return: The from_workstep_id of this WorkstepChronologyOutputV1.
        :rtype: str
        """
        return self._from_workstep_id

    @from_workstep_id.setter
    def from_workstep_id(self, from_workstep_id):
        """
        Sets the from_workstep_id of this WorkstepChronologyOutputV1.
        The workstep ID from which the chronology starts.

        :param from_workstep_id: The from_workstep_id of this WorkstepChronologyOutputV1.
        :type: str
        """

        self._from_workstep_id = from_workstep_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkstepChronologyOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
