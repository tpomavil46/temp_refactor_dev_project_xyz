# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ProjectInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'configuration': 'list[ScalarPropertyV1]',
        'description': 'str',
        'folder_id': 'str',
        'name': 'str',
        'owner_id': 'str',
        'project_type': 'str',
        'resource_size': 'str'
    }

    attribute_map = {
        'configuration': 'configuration',
        'description': 'description',
        'folder_id': 'folderId',
        'name': 'name',
        'owner_id': 'ownerId',
        'project_type': 'projectType',
        'resource_size': 'resourceSize'
    }

    def __init__(self, configuration=None, description=None, folder_id=None, name=None, owner_id=None, project_type=None, resource_size=None):
        """
        ProjectInputV1 - a model defined in Swagger
        """

        self._configuration = None
        self._description = None
        self._folder_id = None
        self._name = None
        self._owner_id = None
        self._project_type = None
        self._resource_size = None

        if configuration is not None:
          self.configuration = configuration
        if description is not None:
          self.description = description
        if folder_id is not None:
          self.folder_id = folder_id
        if name is not None:
          self.name = name
        if owner_id is not None:
          self.owner_id = owner_id
        if project_type is not None:
          self.project_type = project_type
        if resource_size is not None:
          self.resource_size = resource_size

    @property
    def configuration(self):
        """
        Gets the configuration of this ProjectInputV1.
        The list of configuration settings for the project.

        :return: The configuration of this ProjectInputV1.
        :rtype: list[ScalarPropertyV1]
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """
        Sets the configuration of this ProjectInputV1.
        The list of configuration settings for the project.

        :param configuration: The configuration of this ProjectInputV1.
        :type: list[ScalarPropertyV1]
        """

        self._configuration = configuration

    @property
    def description(self):
        """
        Gets the description of this ProjectInputV1.
        Clarifying information or other plain language description of this item. An input of just whitespaces is equivalent to a null input.

        :return: The description of this ProjectInputV1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ProjectInputV1.
        Clarifying information or other plain language description of this item. An input of just whitespaces is equivalent to a null input.

        :param description: The description of this ProjectInputV1.
        :type: str
        """

        self._description = description

    @property
    def folder_id(self):
        """
        Gets the folder_id of this ProjectInputV1.
        The id of the folder to place the new project into. Special values of 'mine' or 'corporate' place the item in the authenticated user's home folder or the corporate folder, respectively. If null, the project will be created in the authenticated user's home folder.

        :return: The folder_id of this ProjectInputV1.
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """
        Sets the folder_id of this ProjectInputV1.
        The id of the folder to place the new project into. Special values of 'mine' or 'corporate' place the item in the authenticated user's home folder or the corporate folder, respectively. If null, the project will be created in the authenticated user's home folder.

        :param folder_id: The folder_id of this ProjectInputV1.
        :type: str
        """

        self._folder_id = folder_id

    @property
    def name(self):
        """
        Gets the name of this ProjectInputV1.
        Human readable name. Required during creation. An input of just whitespaces is equivalent to a null input.

        :return: The name of this ProjectInputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ProjectInputV1.
        Human readable name. Required during creation. An input of just whitespaces is equivalent to a null input.

        :param name: The name of this ProjectInputV1.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def owner_id(self):
        """
        Gets the owner_id of this ProjectInputV1.
        The ID of the User that owns this project. If omitted when creating a new project, the authenticated user is used by default.

        :return: The owner_id of this ProjectInputV1.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """
        Sets the owner_id of this ProjectInputV1.
        The ID of the User that owns this project. If omitted when creating a new project, the authenticated user is used by default.

        :param owner_id: The owner_id of this ProjectInputV1.
        :type: str
        """

        self._owner_id = owner_id

    @property
    def project_type(self):
        """
        Gets the project_type of this ProjectInputV1.
        The type of project. One of DATA_LAB (default) or DATA_LAB_FUNCTIONS.

        :return: The project_type of this ProjectInputV1.
        :rtype: str
        """
        return self._project_type

    @project_type.setter
    def project_type(self, project_type):
        """
        Sets the project_type of this ProjectInputV1.
        The type of project. One of DATA_LAB (default) or DATA_LAB_FUNCTIONS.

        :param project_type: The project_type of this ProjectInputV1.
        :type: str
        """
        allowed_values = ["DATA_LAB", "DATA_LAB_FUNCTIONS"]
        if project_type not in allowed_values:
            raise ValueError(
                "Invalid value for `project_type` ({0}), must be one of {1}"
                .format(project_type, allowed_values)
            )

        self._project_type = project_type

    @property
    def resource_size(self):
        """
        Gets the resource_size of this ProjectInputV1.
        The size of the resources provisioned for this project. One of UI_S, GP_S (default), GP_M, ML_L, or ML_XL. The values represent a combination of Purpose (represents the use-case and workload) and Size. Purposes: UI = User Interaction, GP = General Purpose, ML = Machine Learning. Sizes: S = Small, M = Medium, L = Large, XL = Extra Large.

        :return: The resource_size of this ProjectInputV1.
        :rtype: str
        """
        return self._resource_size

    @resource_size.setter
    def resource_size(self, resource_size):
        """
        Sets the resource_size of this ProjectInputV1.
        The size of the resources provisioned for this project. One of UI_S, GP_S (default), GP_M, ML_L, or ML_XL. The values represent a combination of Purpose (represents the use-case and workload) and Size. Purposes: UI = User Interaction, GP = General Purpose, ML = Machine Learning. Sizes: S = Small, M = Medium, L = Large, XL = Extra Large.

        :param resource_size: The resource_size of this ProjectInputV1.
        :type: str
        """
        allowed_values = ["UI_S", "GP_S", "GP_M", "ML_L", "ML_XL"]
        if resource_size not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_size` ({0}), must be one of {1}"
                .format(resource_size, allowed_values)
            )

        self._resource_size = resource_size

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ProjectInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
