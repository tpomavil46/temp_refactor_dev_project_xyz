# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class AddOnInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_on_components': 'str',
        'add_on_identifier': 'str',
        'description': 'str',
        'enabled': 'bool',
        'in_development': 'bool',
        'name': 'str',
        'version_string': 'str'
    }

    attribute_map = {
        'add_on_components': 'addOnComponents',
        'add_on_identifier': 'addOnIdentifier',
        'description': 'description',
        'enabled': 'enabled',
        'in_development': 'inDevelopment',
        'name': 'name',
        'version_string': 'versionString'
    }

    def __init__(self, add_on_components=None, add_on_identifier=None, description=None, enabled=False, in_development=False, name=None, version_string=None):
        """
        AddOnInputV1 - a model defined in Swagger
        """

        self._add_on_components = None
        self._add_on_identifier = None
        self._description = None
        self._enabled = None
        self._in_development = None
        self._name = None
        self._version_string = None

        if add_on_components is not None:
          self.add_on_components = add_on_components
        if add_on_identifier is not None:
          self.add_on_identifier = add_on_identifier
        if description is not None:
          self.description = description
        if enabled is not None:
          self.enabled = enabled
        if in_development is not None:
          self.in_development = in_development
        if name is not None:
          self.name = name
        if version_string is not None:
          self.version_string = version_string

    @property
    def add_on_components(self):
        """
        Gets the add_on_components of this AddOnInputV1.
        A stringified representation of the items on this server that comprise this installed add-on.

        :return: The add_on_components of this AddOnInputV1.
        :rtype: str
        """
        return self._add_on_components

    @add_on_components.setter
    def add_on_components(self, add_on_components):
        """
        Sets the add_on_components of this AddOnInputV1.
        A stringified representation of the items on this server that comprise this installed add-on.

        :param add_on_components: The add_on_components of this AddOnInputV1.
        :type: str
        """

        self._add_on_components = add_on_components

    @property
    def add_on_identifier(self):
        """
        Gets the add_on_identifier of this AddOnInputV1.
        The unique identifier associated with this Add-on, shared across all Seeq server instances.

        :return: The add_on_identifier of this AddOnInputV1.
        :rtype: str
        """
        return self._add_on_identifier

    @add_on_identifier.setter
    def add_on_identifier(self, add_on_identifier):
        """
        Sets the add_on_identifier of this AddOnInputV1.
        The unique identifier associated with this Add-on, shared across all Seeq server instances.

        :param add_on_identifier: The add_on_identifier of this AddOnInputV1.
        :type: str
        """
        if add_on_identifier is None:
            raise ValueError("Invalid value for `add_on_identifier`, must not be `None`")

        self._add_on_identifier = add_on_identifier

    @property
    def description(self):
        """
        Gets the description of this AddOnInputV1.
        Clarifying information or other plain language description of this item. An input of just whitespaces is equivalent to a null input.

        :return: The description of this AddOnInputV1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this AddOnInputV1.
        Clarifying information or other plain language description of this item. An input of just whitespaces is equivalent to a null input.

        :param description: The description of this AddOnInputV1.
        :type: str
        """

        self._description = description

    @property
    def enabled(self):
        """
        Gets the enabled of this AddOnInputV1.
        Whether this item is enabled

        :return: The enabled of this AddOnInputV1.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this AddOnInputV1.
        Whether this item is enabled

        :param enabled: The enabled of this AddOnInputV1.
        :type: bool
        """

        self._enabled = enabled

    @property
    def in_development(self):
        """
        Gets the in_development of this AddOnInputV1.
        Whether this item is in Development Mode, meaning that it is not allowed to be shared with any other users. Non-administrators may only install Add-on Tools in Development Mode. This property may not be altered after creation. Defaults to false.

        :return: The in_development of this AddOnInputV1.
        :rtype: bool
        """
        return self._in_development

    @in_development.setter
    def in_development(self, in_development):
        """
        Sets the in_development of this AddOnInputV1.
        Whether this item is in Development Mode, meaning that it is not allowed to be shared with any other users. Non-administrators may only install Add-on Tools in Development Mode. This property may not be altered after creation. Defaults to false.

        :param in_development: The in_development of this AddOnInputV1.
        :type: bool
        """

        self._in_development = in_development

    @property
    def name(self):
        """
        Gets the name of this AddOnInputV1.
        Human readable name. Required during creation. An input of just whitespaces is equivalent to a null input.

        :return: The name of this AddOnInputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AddOnInputV1.
        Human readable name. Required during creation. An input of just whitespaces is equivalent to a null input.

        :param name: The name of this AddOnInputV1.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def version_string(self):
        """
        Gets the version_string of this AddOnInputV1.
        The version of this add-on. Using a MAJOR.MINOR.PATCH version format is preferred.

        :return: The version_string of this AddOnInputV1.
        :rtype: str
        """
        return self._version_string

    @version_string.setter
    def version_string(self, version_string):
        """
        Sets the version_string of this AddOnInputV1.
        The version of this add-on. Using a MAJOR.MINOR.PATCH version format is preferred.

        :param version_string: The version_string of this AddOnInputV1.
        :type: str
        """

        self._version_string = version_string

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AddOnInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
