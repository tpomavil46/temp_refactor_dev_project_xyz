# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ContextOpaqueInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'str',
        'datum_id': 'str',
        'end_time': 'str',
        'key': 'str',
        'start_time': 'str',
        'table_id': 'str'
    }

    attribute_map = {
        'data': 'data',
        'datum_id': 'datumId',
        'end_time': 'endTime',
        'key': 'key',
        'start_time': 'startTime',
        'table_id': 'tableId'
    }

    def __init__(self, data=None, datum_id=None, end_time=None, key=None, start_time=None, table_id=None):
        """
        ContextOpaqueInputV1 - a model defined in Swagger
        """

        self._data = None
        self._datum_id = None
        self._end_time = None
        self._key = None
        self._start_time = None
        self._table_id = None

        if data is not None:
          self.data = data
        if datum_id is not None:
          self.datum_id = datum_id
        if end_time is not None:
          self.end_time = end_time
        if key is not None:
          self.key = key
        if start_time is not None:
          self.start_time = start_time
        if table_id is not None:
          self.table_id = table_id

    @property
    def data(self):
        """
        Gets the data of this ContextOpaqueInputV1.
        The data for this piece of context. If the data is binary it must first be base64 encoded

        :return: The data of this ContextOpaqueInputV1.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this ContextOpaqueInputV1.
        The data for this piece of context. If the data is binary it must first be base64 encoded

        :param data: The data of this ContextOpaqueInputV1.
        :type: str
        """

        self._data = data

    @property
    def datum_id(self):
        """
        Gets the datum_id of this ContextOpaqueInputV1.
        If provided, the ID of a more specific aspect of the Item to associate with the opaque context, such as the ID of a capsule

        :return: The datum_id of this ContextOpaqueInputV1.
        :rtype: str
        """
        return self._datum_id

    @datum_id.setter
    def datum_id(self, datum_id):
        """
        Sets the datum_id of this ContextOpaqueInputV1.
        If provided, the ID of a more specific aspect of the Item to associate with the opaque context, such as the ID of a capsule

        :param datum_id: The datum_id of this ContextOpaqueInputV1.
        :type: str
        """

        self._datum_id = datum_id

    @property
    def end_time(self):
        """
        Gets the end_time of this ContextOpaqueInputV1.
        The end time of the opaque context in the form of an ISO8601 timestamp. If provided, start time must also be provided.

        :return: The end_time of this ContextOpaqueInputV1.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this ContextOpaqueInputV1.
        The end time of the opaque context in the form of an ISO8601 timestamp. If provided, start time must also be provided.

        :param end_time: The end_time of this ContextOpaqueInputV1.
        :type: str
        """

        self._end_time = end_time

    @property
    def key(self):
        """
        Gets the key of this ContextOpaqueInputV1.
        The identifier of the data. This will uniquely identify this piece of opaque context for a specific Item or datum

        :return: The key of this ContextOpaqueInputV1.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this ContextOpaqueInputV1.
        The identifier of the data. This will uniquely identify this piece of opaque context for a specific Item or datum

        :param key: The key of this ContextOpaqueInputV1.
        :type: str
        """

        self._key = key

    @property
    def start_time(self):
        """
        Gets the start_time of this ContextOpaqueInputV1.
        The start time of the opaque context in the form of an ISO8601 timestamp. If provided, end time must also be provided.

        :return: The start_time of this ContextOpaqueInputV1.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this ContextOpaqueInputV1.
        The start time of the opaque context in the form of an ISO8601 timestamp. If provided, end time must also be provided.

        :param start_time: The start_time of this ContextOpaqueInputV1.
        :type: str
        """

        self._start_time = start_time

    @property
    def table_id(self):
        """
        Gets the table_id of this ContextOpaqueInputV1.
        If provided, the ID of the Table Definition that will be used for permissions checking. The user needs read permissions on the provided table definition and theitem has to be in the table in order to create, update, or delete context. If not provided, the user must have read permissions on the item id the context is being applied to.

        :return: The table_id of this ContextOpaqueInputV1.
        :rtype: str
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """
        Sets the table_id of this ContextOpaqueInputV1.
        If provided, the ID of the Table Definition that will be used for permissions checking. The user needs read permissions on the provided table definition and theitem has to be in the table in order to create, update, or delete context. If not provided, the user must have read permissions on the item id the context is being applied to.

        :param table_id: The table_id of this ContextOpaqueInputV1.
        :type: str
        """

        self._table_id = table_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ContextOpaqueInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
