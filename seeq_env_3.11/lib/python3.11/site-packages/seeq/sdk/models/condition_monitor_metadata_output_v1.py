# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ConditionMonitorMetadataOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'condition_ids': 'list[str]',
        'creator': 'IdentityPreviewV1',
        'enabled': 'bool',
        'id': 'str',
        'name': 'str',
        'workbook': 'ConditionMonitorWorkbookOutputV1',
        'workbooks': 'dict(str, str)'
    }

    attribute_map = {
        'condition_ids': 'conditionIds',
        'creator': 'creator',
        'enabled': 'enabled',
        'id': 'id',
        'name': 'name',
        'workbook': 'workbook',
        'workbooks': 'workbooks'
    }

    def __init__(self, condition_ids=None, creator=None, enabled=None, id=None, name=None, workbook=None, workbooks=None):
        """
        ConditionMonitorMetadataOutputV1 - a model defined in Swagger
        """

        self._condition_ids = None
        self._creator = None
        self._enabled = None
        self._id = None
        self._name = None
        self._workbook = None
        self._workbooks = None

        if condition_ids is not None:
          self.condition_ids = condition_ids
        if creator is not None:
          self.creator = creator
        if enabled is not None:
          self.enabled = enabled
        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if workbook is not None:
          self.workbook = workbook
        if workbooks is not None:
          self.workbooks = workbooks

    @property
    def condition_ids(self):
        """
        Gets the condition_ids of this ConditionMonitorMetadataOutputV1.
        The IDs of the monitored conditions

        :return: The condition_ids of this ConditionMonitorMetadataOutputV1.
        :rtype: list[str]
        """
        return self._condition_ids

    @condition_ids.setter
    def condition_ids(self, condition_ids):
        """
        Sets the condition_ids of this ConditionMonitorMetadataOutputV1.
        The IDs of the monitored conditions

        :param condition_ids: The condition_ids of this ConditionMonitorMetadataOutputV1.
        :type: list[str]
        """
        if condition_ids is None:
            raise ValueError("Invalid value for `condition_ids`, must not be `None`")

        self._condition_ids = condition_ids

    @property
    def creator(self):
        """
        Gets the creator of this ConditionMonitorMetadataOutputV1.

        :return: The creator of this ConditionMonitorMetadataOutputV1.
        :rtype: IdentityPreviewV1
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """
        Sets the creator of this ConditionMonitorMetadataOutputV1.

        :param creator: The creator of this ConditionMonitorMetadataOutputV1.
        :type: IdentityPreviewV1
        """

        self._creator = creator

    @property
    def enabled(self):
        """
        Gets the enabled of this ConditionMonitorMetadataOutputV1.
        Whether the associated condition monitor is enabled or not

        :return: The enabled of this ConditionMonitorMetadataOutputV1.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this ConditionMonitorMetadataOutputV1.
        Whether the associated condition monitor is enabled or not

        :param enabled: The enabled of this ConditionMonitorMetadataOutputV1.
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def id(self):
        """
        Gets the id of this ConditionMonitorMetadataOutputV1.
        ID of the associated condition monitor

        :return: The id of this ConditionMonitorMetadataOutputV1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ConditionMonitorMetadataOutputV1.
        ID of the associated condition monitor

        :param id: The id of this ConditionMonitorMetadataOutputV1.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this ConditionMonitorMetadataOutputV1.
        Notification name

        :return: The name of this ConditionMonitorMetadataOutputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ConditionMonitorMetadataOutputV1.
        Notification name

        :param name: The name of this ConditionMonitorMetadataOutputV1.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def workbook(self):
        """
        Gets the workbook of this ConditionMonitorMetadataOutputV1.

        :return: The workbook of this ConditionMonitorMetadataOutputV1.
        :rtype: ConditionMonitorWorkbookOutputV1
        """
        return self._workbook

    @workbook.setter
    def workbook(self, workbook):
        """
        Sets the workbook of this ConditionMonitorMetadataOutputV1.

        :param workbook: The workbook of this ConditionMonitorMetadataOutputV1.
        :type: ConditionMonitorWorkbookOutputV1
        """

        self._workbook = workbook

    @property
    def workbooks(self):
        """
        Gets the workbooks of this ConditionMonitorMetadataOutputV1.
        The workbooks that contain the conditions associated with the condition monitor

        :return: The workbooks of this ConditionMonitorMetadataOutputV1.
        :rtype: dict(str, str)
        """
        return self._workbooks

    @workbooks.setter
    def workbooks(self, workbooks):
        """
        Sets the workbooks of this ConditionMonitorMetadataOutputV1.
        The workbooks that contain the conditions associated with the condition monitor

        :param workbooks: The workbooks of this ConditionMonitorMetadataOutputV1.
        :type: dict(str, str)
        """
        if workbooks is None:
            raise ValueError("Invalid value for `workbooks`, must not be `None`")

        self._workbooks = workbooks

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ConditionMonitorMetadataOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
