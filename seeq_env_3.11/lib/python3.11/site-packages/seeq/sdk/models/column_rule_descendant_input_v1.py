# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ColumnRuleDescendantInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_index': 'int',
        'item_type': 'str',
        'level': 'int',
        'property_match_operator': 'str',
        'property_name': 'str',
        'property_value': 'str'
    }

    attribute_map = {
        'column_index': 'columnIndex',
        'item_type': 'itemType',
        'level': 'level',
        'property_match_operator': 'propertyMatchOperator',
        'property_name': 'propertyName',
        'property_value': 'propertyValue'
    }

    def __init__(self, column_index=None, item_type=None, level=None, property_match_operator=None, property_name=None, property_value=None):
        """
        ColumnRuleDescendantInputV1 - a model defined in Swagger
        """

        self._column_index = None
        self._item_type = None
        self._level = None
        self._property_match_operator = None
        self._property_name = None
        self._property_value = None

        if column_index is not None:
          self.column_index = column_index
        if item_type is not None:
          self.item_type = item_type
        if level is not None:
          self.level = level
        if property_match_operator is not None:
          self.property_match_operator = property_match_operator
        if property_name is not None:
          self.property_name = property_name
        if property_value is not None:
          self.property_value = property_value

    @property
    def column_index(self):
        """
        Gets the column_index of this ColumnRuleDescendantInputV1.
        The index of the column that references the item to search descendants for. The column index is 1-based

        :return: The column_index of this ColumnRuleDescendantInputV1.
        :rtype: int
        """
        return self._column_index

    @column_index.setter
    def column_index(self, column_index):
        """
        Sets the column_index of this ColumnRuleDescendantInputV1.
        The index of the column that references the item to search descendants for. The column index is 1-based

        :param column_index: The column_index of this ColumnRuleDescendantInputV1.
        :type: int
        """
        if column_index is None:
            raise ValueError("Invalid value for `column_index`, must not be `None`")

        self._column_index = column_index

    @property
    def item_type(self):
        """
        Gets the item_type of this ColumnRuleDescendantInputV1.
        The type of item to search for. If not specified, the rule will search for all item                         types. If specified, it must be a valid item type. For example, if the column references an Area,                          the itemType could be \"Asset\" to search for all assets under the area. If the column references                         an Asset, the itemType could be \"Condition\" to search for all conditions under the asset

        :return: The item_type of this ColumnRuleDescendantInputV1.
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """
        Sets the item_type of this ColumnRuleDescendantInputV1.
        The type of item to search for. If not specified, the rule will search for all item                         types. If specified, it must be a valid item type. For example, if the column references an Area,                          the itemType could be \"Asset\" to search for all assets under the area. If the column references                         an Asset, the itemType could be \"Condition\" to search for all conditions under the asset

        :param item_type: The item_type of this ColumnRuleDescendantInputV1.
        :type: str
        """

        self._item_type = item_type

    @property
    def level(self):
        """
        Gets the level of this ColumnRuleDescendantInputV1.
        The level which should be searched. If not specified, the rule will search all levels.If specified, it must be greater than 0, and only the specified level will be searched.

        :return: The level of this ColumnRuleDescendantInputV1.
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """
        Sets the level of this ColumnRuleDescendantInputV1.
        The level which should be searched. If not specified, the rule will search all levels.If specified, it must be greater than 0, and only the specified level will be searched.

        :param level: The level of this ColumnRuleDescendantInputV1.
        :type: int
        """

        self._level = level

    @property
    def property_match_operator(self):
        """
        Gets the property_match_operator of this ColumnRuleDescendantInputV1.
        The operator to use for matching the property value. Available options are EQUALS, EQUALS_IGNORE_CASE, NOT_EQUALS, WITHIN and STRING_CONTAINS

        :return: The property_match_operator of this ColumnRuleDescendantInputV1.
        :rtype: str
        """
        return self._property_match_operator

    @property_match_operator.setter
    def property_match_operator(self, property_match_operator):
        """
        Sets the property_match_operator of this ColumnRuleDescendantInputV1.
        The operator to use for matching the property value. Available options are EQUALS, EQUALS_IGNORE_CASE, NOT_EQUALS, WITHIN and STRING_CONTAINS

        :param property_match_operator: The property_match_operator of this ColumnRuleDescendantInputV1.
        :type: str
        """
        if property_match_operator is None:
            raise ValueError("Invalid value for `property_match_operator`, must not be `None`")
        allowed_values = ["EQUALS", "EQUALS_IGNORE_CASE", "NOT_EQUALS", "WITHIN", "STRING_CONTAINS", "REGEX_MATCHES", "NOT_REGEX_MATCHES"]
        if property_match_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `property_match_operator` ({0}), must be one of {1}"
                .format(property_match_operator, allowed_values)
            )

        self._property_match_operator = property_match_operator

    @property
    def property_name(self):
        """
        Gets the property_name of this ColumnRuleDescendantInputV1.
        The property name to search

        :return: The property_name of this ColumnRuleDescendantInputV1.
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """
        Sets the property_name of this ColumnRuleDescendantInputV1.
        The property name to search

        :param property_name: The property_name of this ColumnRuleDescendantInputV1.
        :type: str
        """
        if property_name is None:
            raise ValueError("Invalid value for `property_name`, must not be `None`")

        self._property_name = property_name

    @property
    def property_value(self):
        """
        Gets the property_value of this ColumnRuleDescendantInputV1.
        The property value to search for

        :return: The property_value of this ColumnRuleDescendantInputV1.
        :rtype: str
        """
        return self._property_value

    @property_value.setter
    def property_value(self, property_value):
        """
        Sets the property_value of this ColumnRuleDescendantInputV1.
        The property value to search for

        :param property_value: The property_value of this ColumnRuleDescendantInputV1.
        :type: str
        """
        if property_value is None:
            raise ValueError("Invalid value for `property_value`, must not be `None`")

        self._property_value = property_value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ColumnRuleDescendantInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
