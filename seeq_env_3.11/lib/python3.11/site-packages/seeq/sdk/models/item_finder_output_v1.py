# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ItemFinderOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cron_schedule': 'list[str]',
        'cron_schedule_description': 'str',
        'description': 'str',
        'effective_permissions': 'PermissionsV1',
        'enabled': 'bool',
        'executor_id': 'str',
        'id': 'str',
        'is_archived': 'bool',
        'is_redacted': 'bool',
        'last_run_warnings': 'list[str]',
        'name': 'str',
        'scoped_to': 'str',
        'searches': 'list[object]',
        'status_message': 'str',
        'timezone': 'str',
        'translation_key': 'str',
        'type': 'str'
    }

    attribute_map = {
        'cron_schedule': 'cronSchedule',
        'cron_schedule_description': 'cronScheduleDescription',
        'description': 'description',
        'effective_permissions': 'effectivePermissions',
        'enabled': 'enabled',
        'executor_id': 'executorId',
        'id': 'id',
        'is_archived': 'isArchived',
        'is_redacted': 'isRedacted',
        'last_run_warnings': 'lastRunWarnings',
        'name': 'name',
        'scoped_to': 'scopedTo',
        'searches': 'searches',
        'status_message': 'statusMessage',
        'timezone': 'timezone',
        'translation_key': 'translationKey',
        'type': 'type'
    }

    def __init__(self, cron_schedule=None, cron_schedule_description=None, description=None, effective_permissions=None, enabled=None, executor_id=None, id=None, is_archived=False, is_redacted=False, last_run_warnings=None, name=None, scoped_to=None, searches=None, status_message=None, timezone=None, translation_key=None, type=None):
        """
        ItemFinderOutputV1 - a model defined in Swagger
        """

        self._cron_schedule = None
        self._cron_schedule_description = None
        self._description = None
        self._effective_permissions = None
        self._enabled = None
        self._executor_id = None
        self._id = None
        self._is_archived = None
        self._is_redacted = None
        self._last_run_warnings = None
        self._name = None
        self._scoped_to = None
        self._searches = None
        self._status_message = None
        self._timezone = None
        self._translation_key = None
        self._type = None

        if cron_schedule is not None:
          self.cron_schedule = cron_schedule
        if cron_schedule_description is not None:
          self.cron_schedule_description = cron_schedule_description
        if description is not None:
          self.description = description
        if effective_permissions is not None:
          self.effective_permissions = effective_permissions
        if enabled is not None:
          self.enabled = enabled
        if executor_id is not None:
          self.executor_id = executor_id
        if id is not None:
          self.id = id
        if is_archived is not None:
          self.is_archived = is_archived
        if is_redacted is not None:
          self.is_redacted = is_redacted
        if last_run_warnings is not None:
          self.last_run_warnings = last_run_warnings
        if name is not None:
          self.name = name
        if scoped_to is not None:
          self.scoped_to = scoped_to
        if searches is not None:
          self.searches = searches
        if status_message is not None:
          self.status_message = status_message
        if timezone is not None:
          self.timezone = timezone
        if translation_key is not None:
          self.translation_key = translation_key
        if type is not None:
          self.type = type

    @property
    def cron_schedule(self):
        """
        Gets the cron_schedule of this ItemFinderOutputV1.
        The item finder's check interval(s) as a list of cron expressions (see https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html)

        :return: The cron_schedule of this ItemFinderOutputV1.
        :rtype: list[str]
        """
        return self._cron_schedule

    @cron_schedule.setter
    def cron_schedule(self, cron_schedule):
        """
        Sets the cron_schedule of this ItemFinderOutputV1.
        The item finder's check interval(s) as a list of cron expressions (see https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html)

        :param cron_schedule: The cron_schedule of this ItemFinderOutputV1.
        :type: list[str]
        """

        self._cron_schedule = cron_schedule

    @property
    def cron_schedule_description(self):
        """
        Gets the cron_schedule_description of this ItemFinderOutputV1.
        A human readable description of the cron schedule

        :return: The cron_schedule_description of this ItemFinderOutputV1.
        :rtype: str
        """
        return self._cron_schedule_description

    @cron_schedule_description.setter
    def cron_schedule_description(self, cron_schedule_description):
        """
        Sets the cron_schedule_description of this ItemFinderOutputV1.
        A human readable description of the cron schedule

        :param cron_schedule_description: The cron_schedule_description of this ItemFinderOutputV1.
        :type: str
        """

        self._cron_schedule_description = cron_schedule_description

    @property
    def description(self):
        """
        Gets the description of this ItemFinderOutputV1.
        Clarifying information or other plain language description of this item

        :return: The description of this ItemFinderOutputV1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ItemFinderOutputV1.
        Clarifying information or other plain language description of this item

        :param description: The description of this ItemFinderOutputV1.
        :type: str
        """

        self._description = description

    @property
    def effective_permissions(self):
        """
        Gets the effective_permissions of this ItemFinderOutputV1.

        :return: The effective_permissions of this ItemFinderOutputV1.
        :rtype: PermissionsV1
        """
        return self._effective_permissions

    @effective_permissions.setter
    def effective_permissions(self, effective_permissions):
        """
        Sets the effective_permissions of this ItemFinderOutputV1.

        :param effective_permissions: The effective_permissions of this ItemFinderOutputV1.
        :type: PermissionsV1
        """

        self._effective_permissions = effective_permissions

    @property
    def enabled(self):
        """
        Gets the enabled of this ItemFinderOutputV1.
        Whether this item finder is enabled or not

        :return: The enabled of this ItemFinderOutputV1.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this ItemFinderOutputV1.
        Whether this item finder is enabled or not

        :param enabled: The enabled of this ItemFinderOutputV1.
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def executor_id(self):
        """
        Gets the executor_id of this ItemFinderOutputV1.
        The ID of the user that runs the job of finding the items. The permissions of this user will be used to determine what items can be read.

        :return: The executor_id of this ItemFinderOutputV1.
        :rtype: str
        """
        return self._executor_id

    @executor_id.setter
    def executor_id(self, executor_id):
        """
        Sets the executor_id of this ItemFinderOutputV1.
        The ID of the user that runs the job of finding the items. The permissions of this user will be used to determine what items can be read.

        :param executor_id: The executor_id of this ItemFinderOutputV1.
        :type: str
        """
        if executor_id is None:
            raise ValueError("Invalid value for `executor_id`, must not be `None`")

        self._executor_id = executor_id

    @property
    def id(self):
        """
        Gets the id of this ItemFinderOutputV1.
        The ID that can be used to interact with the item

        :return: The id of this ItemFinderOutputV1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ItemFinderOutputV1.
        The ID that can be used to interact with the item

        :param id: The id of this ItemFinderOutputV1.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_archived(self):
        """
        Gets the is_archived of this ItemFinderOutputV1.
        Whether item is archived

        :return: The is_archived of this ItemFinderOutputV1.
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """
        Sets the is_archived of this ItemFinderOutputV1.
        Whether item is archived

        :param is_archived: The is_archived of this ItemFinderOutputV1.
        :type: bool
        """

        self._is_archived = is_archived

    @property
    def is_redacted(self):
        """
        Gets the is_redacted of this ItemFinderOutputV1.
        Whether item is redacted

        :return: The is_redacted of this ItemFinderOutputV1.
        :rtype: bool
        """
        return self._is_redacted

    @is_redacted.setter
    def is_redacted(self, is_redacted):
        """
        Sets the is_redacted of this ItemFinderOutputV1.
        Whether item is redacted

        :param is_redacted: The is_redacted of this ItemFinderOutputV1.
        :type: bool
        """

        self._is_redacted = is_redacted

    @property
    def last_run_warnings(self):
        """
        Gets the last_run_warnings of this ItemFinderOutputV1.
        The most recent list of warnings or errors that resulted from evaluating any of the finder configurations, such as items that failed to swap

        :return: The last_run_warnings of this ItemFinderOutputV1.
        :rtype: list[str]
        """
        return self._last_run_warnings

    @last_run_warnings.setter
    def last_run_warnings(self, last_run_warnings):
        """
        Sets the last_run_warnings of this ItemFinderOutputV1.
        The most recent list of warnings or errors that resulted from evaluating any of the finder configurations, such as items that failed to swap

        :param last_run_warnings: The last_run_warnings of this ItemFinderOutputV1.
        :type: list[str]
        """
        if last_run_warnings is None:
            raise ValueError("Invalid value for `last_run_warnings`, must not be `None`")

        self._last_run_warnings = last_run_warnings

    @property
    def name(self):
        """
        Gets the name of this ItemFinderOutputV1.
        The human readable name

        :return: The name of this ItemFinderOutputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ItemFinderOutputV1.
        The human readable name

        :param name: The name of this ItemFinderOutputV1.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def scoped_to(self):
        """
        Gets the scoped_to of this ItemFinderOutputV1.
        The ID of the workbook to which this item is scoped or null if it is in the global scope.

        :return: The scoped_to of this ItemFinderOutputV1.
        :rtype: str
        """
        return self._scoped_to

    @scoped_to.setter
    def scoped_to(self, scoped_to):
        """
        Sets the scoped_to of this ItemFinderOutputV1.
        The ID of the workbook to which this item is scoped or null if it is in the global scope.

        :param scoped_to: The scoped_to of this ItemFinderOutputV1.
        :type: str
        """

        self._scoped_to = scoped_to

    @property
    def searches(self):
        """
        Gets the searches of this ItemFinderOutputV1.
        The list of configurations for finding items

        :return: The searches of this ItemFinderOutputV1.
        :rtype: list[object]
        """
        return self._searches

    @searches.setter
    def searches(self, searches):
        """
        Sets the searches of this ItemFinderOutputV1.
        The list of configurations for finding items

        :param searches: The searches of this ItemFinderOutputV1.
        :type: list[object]
        """
        if searches is None:
            raise ValueError("Invalid value for `searches`, must not be `None`")

        self._searches = searches

    @property
    def status_message(self):
        """
        Gets the status_message of this ItemFinderOutputV1.
        A plain language status message with information about any issues that may have been encountered during an operation

        :return: The status_message of this ItemFinderOutputV1.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """
        Sets the status_message of this ItemFinderOutputV1.
        A plain language status message with information about any issues that may have been encountered during an operation

        :param status_message: The status_message of this ItemFinderOutputV1.
        :type: str
        """

        self._status_message = status_message

    @property
    def timezone(self):
        """
        Gets the timezone of this ItemFinderOutputV1.
        The IANA timezone in which the schedule will be run, defaults to UTC

        :return: The timezone of this ItemFinderOutputV1.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this ItemFinderOutputV1.
        The IANA timezone in which the schedule will be run, defaults to UTC

        :param timezone: The timezone of this ItemFinderOutputV1.
        :type: str
        """

        self._timezone = timezone

    @property
    def translation_key(self):
        """
        Gets the translation_key of this ItemFinderOutputV1.
        The item's translation key, if any

        :return: The translation_key of this ItemFinderOutputV1.
        :rtype: str
        """
        return self._translation_key

    @translation_key.setter
    def translation_key(self, translation_key):
        """
        Sets the translation_key of this ItemFinderOutputV1.
        The item's translation key, if any

        :param translation_key: The translation_key of this ItemFinderOutputV1.
        :type: str
        """

        self._translation_key = translation_key

    @property
    def type(self):
        """
        Gets the type of this ItemFinderOutputV1.
        The type of the item

        :return: The type of this ItemFinderOutputV1.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ItemFinderOutputV1.
        The type of the item

        :param type: The type of this ItemFinderOutputV1.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ItemFinderOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
