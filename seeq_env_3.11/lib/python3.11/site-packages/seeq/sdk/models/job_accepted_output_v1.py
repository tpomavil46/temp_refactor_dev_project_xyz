# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class JobAcceptedOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_group': 'str',
        'job_id': 'str',
        'job_scheduler_type': 'str',
        'status_message': 'str'
    }

    attribute_map = {
        'job_group': 'jobGroup',
        'job_id': 'jobId',
        'job_scheduler_type': 'jobSchedulerType',
        'status_message': 'statusMessage'
    }

    def __init__(self, job_group=None, job_id=None, job_scheduler_type=None, status_message=None):
        """
        JobAcceptedOutputV1 - a model defined in Swagger
        """

        self._job_group = None
        self._job_id = None
        self._job_scheduler_type = None
        self._status_message = None

        if job_group is not None:
          self.job_group = job_group
        if job_id is not None:
          self.job_id = job_id
        if job_scheduler_type is not None:
          self.job_scheduler_type = job_scheduler_type
        if status_message is not None:
          self.status_message = status_message

    @property
    def job_group(self):
        """
        Gets the job_group of this JobAcceptedOutputV1.
        The group to which the job belongs

        :return: The job_group of this JobAcceptedOutputV1.
        :rtype: str
        """
        return self._job_group

    @job_group.setter
    def job_group(self, job_group):
        """
        Sets the job_group of this JobAcceptedOutputV1.
        The group to which the job belongs

        :param job_group: The job_group of this JobAcceptedOutputV1.
        :type: str
        """

        self._job_group = job_group

    @property
    def job_id(self):
        """
        Gets the job_id of this JobAcceptedOutputV1.
        The ID of the job

        :return: The job_id of this JobAcceptedOutputV1.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """
        Sets the job_id of this JobAcceptedOutputV1.
        The ID of the job

        :param job_id: The job_id of this JobAcceptedOutputV1.
        :type: str
        """

        self._job_id = job_id

    @property
    def job_scheduler_type(self):
        """
        Gets the job_scheduler_type of this JobAcceptedOutputV1.
        The type of the scheduler that scheduled the job

        :return: The job_scheduler_type of this JobAcceptedOutputV1.
        :rtype: str
        """
        return self._job_scheduler_type

    @job_scheduler_type.setter
    def job_scheduler_type(self, job_scheduler_type):
        """
        Sets the job_scheduler_type of this JobAcceptedOutputV1.
        The type of the scheduler that scheduled the job

        :param job_scheduler_type: The job_scheduler_type of this JobAcceptedOutputV1.
        :type: str
        """
        allowed_values = ["User", "System", "AsyncMigration"]
        if job_scheduler_type not in allowed_values:
            raise ValueError(
                "Invalid value for `job_scheduler_type` ({0}), must be one of {1}"
                .format(job_scheduler_type, allowed_values)
            )

        self._job_scheduler_type = job_scheduler_type

    @property
    def status_message(self):
        """
        Gets the status_message of this JobAcceptedOutputV1.
        A plain language status message with information about any issues that may have been encountered during an operation. Null if the status message has not been set.

        :return: The status_message of this JobAcceptedOutputV1.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """
        Sets the status_message of this JobAcceptedOutputV1.
        A plain language status message with information about any issues that may have been encountered during an operation. Null if the status message has not been set.

        :param status_message: The status_message of this JobAcceptedOutputV1.
        :type: str
        """

        self._status_message = status_message

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, JobAcceptedOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
