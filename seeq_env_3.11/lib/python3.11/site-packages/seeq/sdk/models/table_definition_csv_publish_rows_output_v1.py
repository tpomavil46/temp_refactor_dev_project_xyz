# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class TableDefinitionCSVPublishRowsOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'row_created_or_updated_count': 'int',
        'row_error_count': 'int'
    }

    attribute_map = {
        'row_created_or_updated_count': 'rowCreatedOrUpdatedCount',
        'row_error_count': 'rowErrorCount'
    }

    def __init__(self, row_created_or_updated_count=None, row_error_count=None):
        """
        TableDefinitionCSVPublishRowsOutputV1 - a model defined in Swagger
        """

        self._row_created_or_updated_count = None
        self._row_error_count = None

        if row_created_or_updated_count is not None:
          self.row_created_or_updated_count = row_created_or_updated_count
        if row_error_count is not None:
          self.row_error_count = row_error_count

    @property
    def row_created_or_updated_count(self):
        """
        Gets the row_created_or_updated_count of this TableDefinitionCSVPublishRowsOutputV1.

        :return: The row_created_or_updated_count of this TableDefinitionCSVPublishRowsOutputV1.
        :rtype: int
        """
        return self._row_created_or_updated_count

    @row_created_or_updated_count.setter
    def row_created_or_updated_count(self, row_created_or_updated_count):
        """
        Sets the row_created_or_updated_count of this TableDefinitionCSVPublishRowsOutputV1.

        :param row_created_or_updated_count: The row_created_or_updated_count of this TableDefinitionCSVPublishRowsOutputV1.
        :type: int
        """

        self._row_created_or_updated_count = row_created_or_updated_count

    @property
    def row_error_count(self):
        """
        Gets the row_error_count of this TableDefinitionCSVPublishRowsOutputV1.

        :return: The row_error_count of this TableDefinitionCSVPublishRowsOutputV1.
        :rtype: int
        """
        return self._row_error_count

    @row_error_count.setter
    def row_error_count(self, row_error_count):
        """
        Sets the row_error_count of this TableDefinitionCSVPublishRowsOutputV1.

        :param row_error_count: The row_error_count of this TableDefinitionCSVPublishRowsOutputV1.
        :type: int
        """

        self._row_error_count = row_error_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TableDefinitionCSVPublishRowsOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
