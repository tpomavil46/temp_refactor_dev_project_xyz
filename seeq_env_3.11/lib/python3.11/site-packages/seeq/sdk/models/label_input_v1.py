# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class LabelInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_id': 'str',
        'icon': 'str',
        'name': 'str',
        'parent_id': 'str'
    }

    attribute_map = {
        'category_id': 'categoryId',
        'icon': 'icon',
        'name': 'name',
        'parent_id': 'parentId'
    }

    def __init__(self, category_id=None, icon=None, name=None, parent_id=None):
        """
        LabelInputV1 - a model defined in Swagger
        """

        self._category_id = None
        self._icon = None
        self._name = None
        self._parent_id = None

        if category_id is not None:
          self.category_id = category_id
        if icon is not None:
          self.icon = icon
        if name is not None:
          self.name = name
        if parent_id is not None:
          self.parent_id = parent_id

    @property
    def category_id(self):
        """
        Gets the category_id of this LabelInputV1.
        ID of the label category

        :return: The category_id of this LabelInputV1.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """
        Sets the category_id of this LabelInputV1.
        ID of the label category

        :param category_id: The category_id of this LabelInputV1.
        :type: str
        """

        self._category_id = category_id

    @property
    def icon(self):
        """
        Gets the icon of this LabelInputV1.
        Icon for the label. This is the CSS class name of the icon and must begin with 'fa' or 'fc'

        :return: The icon of this LabelInputV1.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """
        Sets the icon of this LabelInputV1.
        Icon for the label. This is the CSS class name of the icon and must begin with 'fa' or 'fc'

        :param icon: The icon of this LabelInputV1.
        :type: str
        """

        self._icon = icon

    @property
    def name(self):
        """
        Gets the name of this LabelInputV1.
        Text for the label

        :return: The name of this LabelInputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LabelInputV1.
        Text for the label

        :param name: The name of this LabelInputV1.
        :type: str
        """

        self._name = name

    @property
    def parent_id(self):
        """
        Gets the parent_id of this LabelInputV1.
        ID of the parent label if this label is part of a hierarchy. A label's category must be at the same level in the hierarchy as the label. Cannot be used with autocomplete categories

        :return: The parent_id of this LabelInputV1.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """
        Sets the parent_id of this LabelInputV1.
        ID of the parent label if this label is part of a hierarchy. A label's category must be at the same level in the hierarchy as the label. Cannot be used with autocomplete categories

        :param parent_id: The parent_id of this LabelInputV1.
        :type: str
        """

        self._parent_id = parent_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LabelInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
