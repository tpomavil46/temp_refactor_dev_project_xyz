# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class RulesResultMessageV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'input_index': 'int',
        'message': 'str',
        'message_arguments': 'dict(str, str)',
        'message_key': 'str',
        'message_number': 'int',
        'multiple_match_result': 'list[str]'
    }

    attribute_map = {
        'input_index': 'inputIndex',
        'message': 'message',
        'message_arguments': 'messageArguments',
        'message_key': 'messageKey',
        'message_number': 'messageNumber',
        'multiple_match_result': 'multipleMatchResult'
    }

    def __init__(self, input_index=None, message=None, message_arguments=None, message_key=None, message_number=None, multiple_match_result=None):
        """
        RulesResultMessageV1 - a model defined in Swagger
        """

        self._input_index = None
        self._message = None
        self._message_arguments = None
        self._message_key = None
        self._message_number = None
        self._multiple_match_result = None

        if input_index is not None:
          self.input_index = input_index
        if message is not None:
          self.message = message
        if message_arguments is not None:
          self.message_arguments = message_arguments
        if message_key is not None:
          self.message_key = message_key
        if message_number is not None:
          self.message_number = message_number
        if multiple_match_result is not None:
          self.multiple_match_result = multiple_match_result

    @property
    def input_index(self):
        """
        Gets the input_index of this RulesResultMessageV1.
        The input the message applies to

        :return: The input_index of this RulesResultMessageV1.
        :rtype: int
        """
        return self._input_index

    @input_index.setter
    def input_index(self, input_index):
        """
        Sets the input_index of this RulesResultMessageV1.
        The input the message applies to

        :param input_index: The input_index of this RulesResultMessageV1.
        :type: int
        """

        self._input_index = input_index

    @property
    def message(self):
        """
        Gets the message of this RulesResultMessageV1.
        The message for the result

        :return: The message of this RulesResultMessageV1.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this RulesResultMessageV1.
        The message for the result

        :param message: The message of this RulesResultMessageV1.
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def message_arguments(self):
        """
        Gets the message_arguments of this RulesResultMessageV1.
        The message arguments for the result

        :return: The message_arguments of this RulesResultMessageV1.
        :rtype: dict(str, str)
        """
        return self._message_arguments

    @message_arguments.setter
    def message_arguments(self, message_arguments):
        """
        Sets the message_arguments of this RulesResultMessageV1.
        The message arguments for the result

        :param message_arguments: The message_arguments of this RulesResultMessageV1.
        :type: dict(str, str)
        """
        if message_arguments is None:
            raise ValueError("Invalid value for `message_arguments`, must not be `None`")

        self._message_arguments = message_arguments

    @property
    def message_key(self):
        """
        Gets the message_key of this RulesResultMessageV1.
        The message key for the result

        :return: The message_key of this RulesResultMessageV1.
        :rtype: str
        """
        return self._message_key

    @message_key.setter
    def message_key(self, message_key):
        """
        Sets the message_key of this RulesResultMessageV1.
        The message key for the result

        :param message_key: The message_key of this RulesResultMessageV1.
        :type: str
        """
        if message_key is None:
            raise ValueError("Invalid value for `message_key`, must not be `None`")

        self._message_key = message_key

    @property
    def message_number(self):
        """
        Gets the message_number of this RulesResultMessageV1.
        The message number of the result

        :return: The message_number of this RulesResultMessageV1.
        :rtype: int
        """
        return self._message_number

    @message_number.setter
    def message_number(self, message_number):
        """
        Sets the message_number of this RulesResultMessageV1.
        The message number of the result

        :param message_number: The message_number of this RulesResultMessageV1.
        :type: int
        """
        if message_number is None:
            raise ValueError("Invalid value for `message_number`, must not be `None`")

        self._message_number = message_number

    @property
    def multiple_match_result(self):
        """
        Gets the multiple_match_result of this RulesResultMessageV1.
        If multiple item matches were found, the IDs of the matches

        :return: The multiple_match_result of this RulesResultMessageV1.
        :rtype: list[str]
        """
        return self._multiple_match_result

    @multiple_match_result.setter
    def multiple_match_result(self, multiple_match_result):
        """
        Sets the multiple_match_result of this RulesResultMessageV1.
        If multiple item matches were found, the IDs of the matches

        :param multiple_match_result: The multiple_match_result of this RulesResultMessageV1.
        :type: list[str]
        """

        self._multiple_match_result = multiple_match_result

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RulesResultMessageV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
