# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class UserOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_key_validity_duration': 'int',
        'agent_provisioning_at': 'str',
        'agent_provisioning_source_address': 'str',
        'agent_provisioning_status': 'str',
        'capabilities': 'list[str]',
        'capability_grants': 'list[CapabilityInheritanceOutputV1]',
        'created_at': 'str',
        'datasource_name': 'str',
        'description': 'str',
        'effective_access_key_validity_duration': 'ScalarValueOutputV1',
        'effective_permissions': 'PermissionsV1',
        'effective_session_duration': 'ScalarValueOutputV1',
        'email': 'str',
        'first_name': 'str',
        'groups': 'list[IdentityPreviewV1]',
        'id': 'str',
        'is_active': 'bool',
        'is_admin': 'bool',
        'is_archived': 'bool',
        'is_enabled': 'bool',
        'is_manager': 'bool',
        'is_password_settable': 'bool',
        'is_redacted': 'bool',
        'last_login_at': 'str',
        'last_name': 'str',
        'last_password_changed_at': 'str',
        'manager': 'IdentityPreviewV1',
        'max_requests': 'int',
        'name': 'str',
        'password_expiry_status': 'str',
        'require_password_reset_on_next_login': 'bool',
        'role': 'str',
        'session_duration': 'int',
        'site': 'str',
        'status_message': 'str',
        'template_workstep_id': 'str',
        'translation_key': 'str',
        'type': 'str',
        'username': 'str',
        'workbench': 'str'
    }

    attribute_map = {
        'access_key_validity_duration': 'accessKeyValidityDuration',
        'agent_provisioning_at': 'agentProvisioningAt',
        'agent_provisioning_source_address': 'agentProvisioningSourceAddress',
        'agent_provisioning_status': 'agentProvisioningStatus',
        'capabilities': 'capabilities',
        'capability_grants': 'capabilityGrants',
        'created_at': 'createdAt',
        'datasource_name': 'datasourceName',
        'description': 'description',
        'effective_access_key_validity_duration': 'effectiveAccessKeyValidityDuration',
        'effective_permissions': 'effectivePermissions',
        'effective_session_duration': 'effectiveSessionDuration',
        'email': 'email',
        'first_name': 'firstName',
        'groups': 'groups',
        'id': 'id',
        'is_active': 'isActive',
        'is_admin': 'isAdmin',
        'is_archived': 'isArchived',
        'is_enabled': 'isEnabled',
        'is_manager': 'isManager',
        'is_password_settable': 'isPasswordSettable',
        'is_redacted': 'isRedacted',
        'last_login_at': 'lastLoginAt',
        'last_name': 'lastName',
        'last_password_changed_at': 'lastPasswordChangedAt',
        'manager': 'manager',
        'max_requests': 'maxRequests',
        'name': 'name',
        'password_expiry_status': 'passwordExpiryStatus',
        'require_password_reset_on_next_login': 'requirePasswordResetOnNextLogin',
        'role': 'role',
        'session_duration': 'sessionDuration',
        'site': 'site',
        'status_message': 'statusMessage',
        'template_workstep_id': 'templateWorkstepId',
        'translation_key': 'translationKey',
        'type': 'type',
        'username': 'username',
        'workbench': 'workbench'
    }

    def __init__(self, access_key_validity_duration=None, agent_provisioning_at=None, agent_provisioning_source_address=None, agent_provisioning_status=None, capabilities=None, capability_grants=None, created_at=None, datasource_name=None, description=None, effective_access_key_validity_duration=None, effective_permissions=None, effective_session_duration=None, email=None, first_name=None, groups=None, id=None, is_active=False, is_admin=None, is_archived=False, is_enabled=False, is_manager=None, is_password_settable=False, is_redacted=False, last_login_at=None, last_name=None, last_password_changed_at=None, manager=None, max_requests=None, name=None, password_expiry_status=None, require_password_reset_on_next_login=None, role=None, session_duration=None, site=None, status_message=None, template_workstep_id=None, translation_key=None, type=None, username=None, workbench=None):
        """
        UserOutputV1 - a model defined in Swagger
        """

        self._access_key_validity_duration = None
        self._agent_provisioning_at = None
        self._agent_provisioning_source_address = None
        self._agent_provisioning_status = None
        self._capabilities = None
        self._capability_grants = None
        self._created_at = None
        self._datasource_name = None
        self._description = None
        self._effective_access_key_validity_duration = None
        self._effective_permissions = None
        self._effective_session_duration = None
        self._email = None
        self._first_name = None
        self._groups = None
        self._id = None
        self._is_active = None
        self._is_admin = None
        self._is_archived = None
        self._is_enabled = None
        self._is_manager = None
        self._is_password_settable = None
        self._is_redacted = None
        self._last_login_at = None
        self._last_name = None
        self._last_password_changed_at = None
        self._manager = None
        self._max_requests = None
        self._name = None
        self._password_expiry_status = None
        self._require_password_reset_on_next_login = None
        self._role = None
        self._session_duration = None
        self._site = None
        self._status_message = None
        self._template_workstep_id = None
        self._translation_key = None
        self._type = None
        self._username = None
        self._workbench = None

        if access_key_validity_duration is not None:
          self.access_key_validity_duration = access_key_validity_duration
        if agent_provisioning_at is not None:
          self.agent_provisioning_at = agent_provisioning_at
        if agent_provisioning_source_address is not None:
          self.agent_provisioning_source_address = agent_provisioning_source_address
        if agent_provisioning_status is not None:
          self.agent_provisioning_status = agent_provisioning_status
        if capabilities is not None:
          self.capabilities = capabilities
        if capability_grants is not None:
          self.capability_grants = capability_grants
        if created_at is not None:
          self.created_at = created_at
        if datasource_name is not None:
          self.datasource_name = datasource_name
        if description is not None:
          self.description = description
        if effective_access_key_validity_duration is not None:
          self.effective_access_key_validity_duration = effective_access_key_validity_duration
        if effective_permissions is not None:
          self.effective_permissions = effective_permissions
        if effective_session_duration is not None:
          self.effective_session_duration = effective_session_duration
        if email is not None:
          self.email = email
        if first_name is not None:
          self.first_name = first_name
        if groups is not None:
          self.groups = groups
        if id is not None:
          self.id = id
        if is_active is not None:
          self.is_active = is_active
        if is_admin is not None:
          self.is_admin = is_admin
        if is_archived is not None:
          self.is_archived = is_archived
        if is_enabled is not None:
          self.is_enabled = is_enabled
        if is_manager is not None:
          self.is_manager = is_manager
        if is_password_settable is not None:
          self.is_password_settable = is_password_settable
        if is_redacted is not None:
          self.is_redacted = is_redacted
        if last_login_at is not None:
          self.last_login_at = last_login_at
        if last_name is not None:
          self.last_name = last_name
        if last_password_changed_at is not None:
          self.last_password_changed_at = last_password_changed_at
        if manager is not None:
          self.manager = manager
        if max_requests is not None:
          self.max_requests = max_requests
        if name is not None:
          self.name = name
        if password_expiry_status is not None:
          self.password_expiry_status = password_expiry_status
        if require_password_reset_on_next_login is not None:
          self.require_password_reset_on_next_login = require_password_reset_on_next_login
        if role is not None:
          self.role = role
        if session_duration is not None:
          self.session_duration = session_duration
        if site is not None:
          self.site = site
        if status_message is not None:
          self.status_message = status_message
        if template_workstep_id is not None:
          self.template_workstep_id = template_workstep_id
        if translation_key is not None:
          self.translation_key = translation_key
        if type is not None:
          self.type = type
        if username is not None:
          self.username = username
        if workbench is not None:
          self.workbench = workbench

    @property
    def access_key_validity_duration(self):
        """
        Gets the access_key_validity_duration of this UserOutputV1.
        The access key validity duration, in minutes, to override the 'Authentication/AccessKey/ValidityWithoutUserLogin' configuration. After the last user login, authentication is allowed with an access key for the period specified here. A value of 0 will effectively disable access keys for this user.

        :return: The access_key_validity_duration of this UserOutputV1.
        :rtype: int
        """
        return self._access_key_validity_duration

    @access_key_validity_duration.setter
    def access_key_validity_duration(self, access_key_validity_duration):
        """
        Sets the access_key_validity_duration of this UserOutputV1.
        The access key validity duration, in minutes, to override the 'Authentication/AccessKey/ValidityWithoutUserLogin' configuration. After the last user login, authentication is allowed with an access key for the period specified here. A value of 0 will effectively disable access keys for this user.

        :param access_key_validity_duration: The access_key_validity_duration of this UserOutputV1.
        :type: int
        """

        self._access_key_validity_duration = access_key_validity_duration

    @property
    def agent_provisioning_at(self):
        """
        Gets the agent_provisioning_at of this UserOutputV1.
        The ISO 8601 date of when the user was provisioned for an agent (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm)

        :return: The agent_provisioning_at of this UserOutputV1.
        :rtype: str
        """
        return self._agent_provisioning_at

    @agent_provisioning_at.setter
    def agent_provisioning_at(self, agent_provisioning_at):
        """
        Sets the agent_provisioning_at of this UserOutputV1.
        The ISO 8601 date of when the user was provisioned for an agent (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm)

        :param agent_provisioning_at: The agent_provisioning_at of this UserOutputV1.
        :type: str
        """

        self._agent_provisioning_at = agent_provisioning_at

    @property
    def agent_provisioning_source_address(self):
        """
        Gets the agent_provisioning_source_address of this UserOutputV1.
        The source IP or CIDR range from where the provisioned agent can connect using the user

        :return: The agent_provisioning_source_address of this UserOutputV1.
        :rtype: str
        """
        return self._agent_provisioning_source_address

    @agent_provisioning_source_address.setter
    def agent_provisioning_source_address(self, agent_provisioning_source_address):
        """
        Sets the agent_provisioning_source_address of this UserOutputV1.
        The source IP or CIDR range from where the provisioned agent can connect using the user

        :param agent_provisioning_source_address: The agent_provisioning_source_address of this UserOutputV1.
        :type: str
        """

        self._agent_provisioning_source_address = agent_provisioning_source_address

    @property
    def agent_provisioning_status(self):
        """
        Gets the agent_provisioning_status of this UserOutputV1.
        The agent provisioning status.

        :return: The agent_provisioning_status of this UserOutputV1.
        :rtype: str
        """
        return self._agent_provisioning_status

    @agent_provisioning_status.setter
    def agent_provisioning_status(self, agent_provisioning_status):
        """
        Sets the agent_provisioning_status of this UserOutputV1.
        The agent provisioning status.

        :param agent_provisioning_status: The agent_provisioning_status of this UserOutputV1.
        :type: str
        """

        self._agent_provisioning_status = agent_provisioning_status

    @property
    def capabilities(self):
        """
        Gets the capabilities of this UserOutputV1.
        (DEPRECATED) Capabilities that the user has been granted

        :return: The capabilities of this UserOutputV1.
        :rtype: list[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """
        Sets the capabilities of this UserOutputV1.
        (DEPRECATED) Capabilities that the user has been granted

        :param capabilities: The capabilities of this UserOutputV1.
        :type: list[str]
        """
        allowed_values = ["Admins", "AnalyticsAdministrationCapability", "AuditTrailCapability", "UserAdministrationCapability", "DatasourceAdministrationCapability", "LogViewerCapability"]
        if not set(capabilities).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `capabilities` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(capabilities)-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._capabilities = capabilities

    @property
    def capability_grants(self):
        """
        Gets the capability_grants of this UserOutputV1.
        Capabilities that the user has been granted, including where the capability was inherited from (if applicable)

        :return: The capability_grants of this UserOutputV1.
        :rtype: list[CapabilityInheritanceOutputV1]
        """
        return self._capability_grants

    @capability_grants.setter
    def capability_grants(self, capability_grants):
        """
        Sets the capability_grants of this UserOutputV1.
        Capabilities that the user has been granted, including where the capability was inherited from (if applicable)

        :param capability_grants: The capability_grants of this UserOutputV1.
        :type: list[CapabilityInheritanceOutputV1]
        """

        self._capability_grants = capability_grants

    @property
    def created_at(self):
        """
        Gets the created_at of this UserOutputV1.
        The ISO 8601 date of when the user was created (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm)

        :return: The created_at of this UserOutputV1.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this UserOutputV1.
        The ISO 8601 date of when the user was created (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm)

        :param created_at: The created_at of this UserOutputV1.
        :type: str
        """

        self._created_at = created_at

    @property
    def datasource_name(self):
        """
        Gets the datasource_name of this UserOutputV1.
        The name of the data source (authentication directory) containing the user

        :return: The datasource_name of this UserOutputV1.
        :rtype: str
        """
        return self._datasource_name

    @datasource_name.setter
    def datasource_name(self, datasource_name):
        """
        Sets the datasource_name of this UserOutputV1.
        The name of the data source (authentication directory) containing the user

        :param datasource_name: The datasource_name of this UserOutputV1.
        :type: str
        """

        self._datasource_name = datasource_name

    @property
    def description(self):
        """
        Gets the description of this UserOutputV1.
        Clarifying information or other plain language description of this item

        :return: The description of this UserOutputV1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this UserOutputV1.
        Clarifying information or other plain language description of this item

        :param description: The description of this UserOutputV1.
        :type: str
        """

        self._description = description

    @property
    def effective_access_key_validity_duration(self):
        """
        Gets the effective_access_key_validity_duration of this UserOutputV1.

        :return: The effective_access_key_validity_duration of this UserOutputV1.
        :rtype: ScalarValueOutputV1
        """
        return self._effective_access_key_validity_duration

    @effective_access_key_validity_duration.setter
    def effective_access_key_validity_duration(self, effective_access_key_validity_duration):
        """
        Sets the effective_access_key_validity_duration of this UserOutputV1.

        :param effective_access_key_validity_duration: The effective_access_key_validity_duration of this UserOutputV1.
        :type: ScalarValueOutputV1
        """

        self._effective_access_key_validity_duration = effective_access_key_validity_duration

    @property
    def effective_permissions(self):
        """
        Gets the effective_permissions of this UserOutputV1.

        :return: The effective_permissions of this UserOutputV1.
        :rtype: PermissionsV1
        """
        return self._effective_permissions

    @effective_permissions.setter
    def effective_permissions(self, effective_permissions):
        """
        Sets the effective_permissions of this UserOutputV1.

        :param effective_permissions: The effective_permissions of this UserOutputV1.
        :type: PermissionsV1
        """

        self._effective_permissions = effective_permissions

    @property
    def effective_session_duration(self):
        """
        Gets the effective_session_duration of this UserOutputV1.

        :return: The effective_session_duration of this UserOutputV1.
        :rtype: ScalarValueOutputV1
        """
        return self._effective_session_duration

    @effective_session_duration.setter
    def effective_session_duration(self, effective_session_duration):
        """
        Sets the effective_session_duration of this UserOutputV1.

        :param effective_session_duration: The effective_session_duration of this UserOutputV1.
        :type: ScalarValueOutputV1
        """

        self._effective_session_duration = effective_session_duration

    @property
    def email(self):
        """
        Gets the email of this UserOutputV1.
        The email address of the user

        :return: The email of this UserOutputV1.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this UserOutputV1.
        The email address of the user

        :param email: The email of this UserOutputV1.
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this UserOutputV1.
        The first name of the user

        :return: The first_name of this UserOutputV1.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this UserOutputV1.
        The first name of the user

        :param first_name: The first_name of this UserOutputV1.
        :type: str
        """

        self._first_name = first_name

    @property
    def groups(self):
        """
        Gets the groups of this UserOutputV1.
        Enabled and unarchived groups the user belongs to

        :return: The groups of this UserOutputV1.
        :rtype: list[IdentityPreviewV1]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """
        Sets the groups of this UserOutputV1.
        Enabled and unarchived groups the user belongs to

        :param groups: The groups of this UserOutputV1.
        :type: list[IdentityPreviewV1]
        """

        self._groups = groups

    @property
    def id(self):
        """
        Gets the id of this UserOutputV1.
        The ID that can be used to interact with the item

        :return: The id of this UserOutputV1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this UserOutputV1.
        The ID that can be used to interact with the item

        :param id: The id of this UserOutputV1.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_active(self):
        """
        Gets the is_active of this UserOutputV1.
        Whether the user is actively using Seeq

        :return: The is_active of this UserOutputV1.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """
        Sets the is_active of this UserOutputV1.
        Whether the user is actively using Seeq

        :param is_active: The is_active of this UserOutputV1.
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_admin(self):
        """
        Gets the is_admin of this UserOutputV1.
        Whether the user has administrator capabilities in Seeq

        :return: The is_admin of this UserOutputV1.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """
        Sets the is_admin of this UserOutputV1.
        Whether the user has administrator capabilities in Seeq

        :param is_admin: The is_admin of this UserOutputV1.
        :type: bool
        """

        self._is_admin = is_admin

    @property
    def is_archived(self):
        """
        Gets the is_archived of this UserOutputV1.
        Whether item is archived

        :return: The is_archived of this UserOutputV1.
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """
        Sets the is_archived of this UserOutputV1.
        Whether item is archived

        :param is_archived: The is_archived of this UserOutputV1.
        :type: bool
        """

        self._is_archived = is_archived

    @property
    def is_enabled(self):
        """
        Gets the is_enabled of this UserOutputV1.
        Whether the user is enabled

        :return: The is_enabled of this UserOutputV1.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """
        Sets the is_enabled of this UserOutputV1.
        Whether the user is enabled

        :param is_enabled: The is_enabled of this UserOutputV1.
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def is_manager(self):
        """
        Gets the is_manager of this UserOutputV1.
        Whether the user is a manager or not

        :return: The is_manager of this UserOutputV1.
        :rtype: bool
        """
        return self._is_manager

    @is_manager.setter
    def is_manager(self, is_manager):
        """
        Sets the is_manager of this UserOutputV1.
        Whether the user is a manager or not

        :param is_manager: The is_manager of this UserOutputV1.
        :type: bool
        """

        self._is_manager = is_manager

    @property
    def is_password_settable(self):
        """
        Gets the is_password_settable of this UserOutputV1.
        Whether the user's password may be updated

        :return: The is_password_settable of this UserOutputV1.
        :rtype: bool
        """
        return self._is_password_settable

    @is_password_settable.setter
    def is_password_settable(self, is_password_settable):
        """
        Sets the is_password_settable of this UserOutputV1.
        Whether the user's password may be updated

        :param is_password_settable: The is_password_settable of this UserOutputV1.
        :type: bool
        """

        self._is_password_settable = is_password_settable

    @property
    def is_redacted(self):
        """
        Gets the is_redacted of this UserOutputV1.
        Whether item is redacted

        :return: The is_redacted of this UserOutputV1.
        :rtype: bool
        """
        return self._is_redacted

    @is_redacted.setter
    def is_redacted(self, is_redacted):
        """
        Sets the is_redacted of this UserOutputV1.
        Whether item is redacted

        :param is_redacted: The is_redacted of this UserOutputV1.
        :type: bool
        """

        self._is_redacted = is_redacted

    @property
    def last_login_at(self):
        """
        Gets the last_login_at of this UserOutputV1.
        The ISO 8601 date of when the user last logged in (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm)

        :return: The last_login_at of this UserOutputV1.
        :rtype: str
        """
        return self._last_login_at

    @last_login_at.setter
    def last_login_at(self, last_login_at):
        """
        Sets the last_login_at of this UserOutputV1.
        The ISO 8601 date of when the user last logged in (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm)

        :param last_login_at: The last_login_at of this UserOutputV1.
        :type: str
        """

        self._last_login_at = last_login_at

    @property
    def last_name(self):
        """
        Gets the last_name of this UserOutputV1.
        The last name of the user

        :return: The last_name of this UserOutputV1.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this UserOutputV1.
        The last name of the user

        :param last_name: The last_name of this UserOutputV1.
        :type: str
        """

        self._last_name = last_name

    @property
    def last_password_changed_at(self):
        """
        Gets the last_password_changed_at of this UserOutputV1.
        The ISO 8601 date of when the user's password last changed in (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm)

        :return: The last_password_changed_at of this UserOutputV1.
        :rtype: str
        """
        return self._last_password_changed_at

    @last_password_changed_at.setter
    def last_password_changed_at(self, last_password_changed_at):
        """
        Sets the last_password_changed_at of this UserOutputV1.
        The ISO 8601 date of when the user's password last changed in (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm)

        :param last_password_changed_at: The last_password_changed_at of this UserOutputV1.
        :type: str
        """

        self._last_password_changed_at = last_password_changed_at

    @property
    def manager(self):
        """
        Gets the manager of this UserOutputV1.

        :return: The manager of this UserOutputV1.
        :rtype: IdentityPreviewV1
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """
        Sets the manager of this UserOutputV1.

        :param manager: The manager of this UserOutputV1.
        :type: IdentityPreviewV1
        """

        self._manager = manager

    @property
    def max_requests(self):
        """
        Gets the max_requests of this UserOutputV1.
        The maximum simultaneous API requests allowed by this user. Overrides the global Threads/HttpServer/MaxRequestsPerUser configuration.

        :return: The max_requests of this UserOutputV1.
        :rtype: int
        """
        return self._max_requests

    @max_requests.setter
    def max_requests(self, max_requests):
        """
        Sets the max_requests of this UserOutputV1.
        The maximum simultaneous API requests allowed by this user. Overrides the global Threads/HttpServer/MaxRequestsPerUser configuration.

        :param max_requests: The max_requests of this UserOutputV1.
        :type: int
        """

        self._max_requests = max_requests

    @property
    def name(self):
        """
        Gets the name of this UserOutputV1.
        The human readable name

        :return: The name of this UserOutputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this UserOutputV1.
        The human readable name

        :param name: The name of this UserOutputV1.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def password_expiry_status(self):
        """
        Gets the password_expiry_status of this UserOutputV1.
        User's password expiry status to determine if user is required to change current password.

        :return: The password_expiry_status of this UserOutputV1.
        :rtype: str
        """
        return self._password_expiry_status

    @password_expiry_status.setter
    def password_expiry_status(self, password_expiry_status):
        """
        Sets the password_expiry_status of this UserOutputV1.
        User's password expiry status to determine if user is required to change current password.

        :param password_expiry_status: The password_expiry_status of this UserOutputV1.
        :type: str
        """
        allowed_values = ["CURRENT", "IN_GRACE_PERIOD", "EXPIRED"]
        if password_expiry_status not in allowed_values:
            raise ValueError(
                "Invalid value for `password_expiry_status` ({0}), must be one of {1}"
                .format(password_expiry_status, allowed_values)
            )

        self._password_expiry_status = password_expiry_status

    @property
    def require_password_reset_on_next_login(self):
        """
        Gets the require_password_reset_on_next_login of this UserOutputV1.
        Determines if this user is required to change their password on their next successful log in.

        :return: The require_password_reset_on_next_login of this UserOutputV1.
        :rtype: bool
        """
        return self._require_password_reset_on_next_login

    @require_password_reset_on_next_login.setter
    def require_password_reset_on_next_login(self, require_password_reset_on_next_login):
        """
        Sets the require_password_reset_on_next_login of this UserOutputV1.
        Determines if this user is required to change their password on their next successful log in.

        :param require_password_reset_on_next_login: The require_password_reset_on_next_login of this UserOutputV1.
        :type: bool
        """

        self._require_password_reset_on_next_login = require_password_reset_on_next_login

    @property
    def role(self):
        """
        Gets the role of this UserOutputV1.
        The user's role.

        :return: The role of this UserOutputV1.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """
        Sets the role of this UserOutputV1.
        The user's role.

        :param role: The role of this UserOutputV1.
        :type: str
        """

        self._role = role

    @property
    def session_duration(self):
        """
        Gets the session_duration of this UserOutputV1.
        The session duration, in minutes, to override the 'Authentication/DefaultSessionDuration' configuration. This controls the maximum period of inactivity before the user must authenticate again.

        :return: The session_duration of this UserOutputV1.
        :rtype: int
        """
        return self._session_duration

    @session_duration.setter
    def session_duration(self, session_duration):
        """
        Sets the session_duration of this UserOutputV1.
        The session duration, in minutes, to override the 'Authentication/DefaultSessionDuration' configuration. This controls the maximum period of inactivity before the user must authenticate again.

        :param session_duration: The session_duration of this UserOutputV1.
        :type: int
        """

        self._session_duration = session_duration

    @property
    def site(self):
        """
        Gets the site of this UserOutputV1.
        The Site a user is assigned to.

        :return: The site of this UserOutputV1.
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """
        Sets the site of this UserOutputV1.
        The Site a user is assigned to.

        :param site: The site of this UserOutputV1.
        :type: str
        """

        self._site = site

    @property
    def status_message(self):
        """
        Gets the status_message of this UserOutputV1.
        A plain language status message with information about any issues that may have been encountered during an operation

        :return: The status_message of this UserOutputV1.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """
        Sets the status_message of this UserOutputV1.
        A plain language status message with information about any issues that may have been encountered during an operation

        :param status_message: The status_message of this UserOutputV1.
        :type: str
        """

        self._status_message = status_message

    @property
    def template_workstep_id(self):
        """
        Gets the template_workstep_id of this UserOutputV1.
        The Workstep ID that is used as the template for any new worksheets created by this user.

        :return: The template_workstep_id of this UserOutputV1.
        :rtype: str
        """
        return self._template_workstep_id

    @template_workstep_id.setter
    def template_workstep_id(self, template_workstep_id):
        """
        Sets the template_workstep_id of this UserOutputV1.
        The Workstep ID that is used as the template for any new worksheets created by this user.

        :param template_workstep_id: The template_workstep_id of this UserOutputV1.
        :type: str
        """

        self._template_workstep_id = template_workstep_id

    @property
    def translation_key(self):
        """
        Gets the translation_key of this UserOutputV1.
        The item's translation key, if any

        :return: The translation_key of this UserOutputV1.
        :rtype: str
        """
        return self._translation_key

    @translation_key.setter
    def translation_key(self, translation_key):
        """
        Sets the translation_key of this UserOutputV1.
        The item's translation key, if any

        :param translation_key: The translation_key of this UserOutputV1.
        :type: str
        """

        self._translation_key = translation_key

    @property
    def type(self):
        """
        Gets the type of this UserOutputV1.
        The type of the item

        :return: The type of this UserOutputV1.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this UserOutputV1.
        The type of the item

        :param type: The type of this UserOutputV1.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def username(self):
        """
        Gets the username of this UserOutputV1.
        The username of the user

        :return: The username of this UserOutputV1.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this UserOutputV1.
        The username of the user

        :param username: The username of this UserOutputV1.
        :type: str
        """

        self._username = username

    @property
    def workbench(self):
        """
        Gets the workbench of this UserOutputV1.
        The workbench configuration of the user

        :return: The workbench of this UserOutputV1.
        :rtype: str
        """
        return self._workbench

    @workbench.setter
    def workbench(self, workbench):
        """
        Sets the workbench of this UserOutputV1.
        The workbench configuration of the user

        :param workbench: The workbench of this UserOutputV1.
        :type: str
        """

        self._workbench = workbench

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
