# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class TableDefinitionCSVUpdateInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_delimiter': 'str',
        'header_row': 'int',
        'name': 'str',
        'unique_id_column_index': 'int',
        'upload_filename': 'str'
    }

    attribute_map = {
        'column_delimiter': 'columnDelimiter',
        'header_row': 'headerRow',
        'name': 'name',
        'unique_id_column_index': 'uniqueIdColumnIndex',
        'upload_filename': 'uploadFilename'
    }

    def __init__(self, column_delimiter=None, header_row=None, name=None, unique_id_column_index=None, upload_filename=None):
        """
        TableDefinitionCSVUpdateInputV1 - a model defined in Swagger
        """

        self._column_delimiter = None
        self._header_row = None
        self._name = None
        self._unique_id_column_index = None
        self._upload_filename = None

        if column_delimiter is not None:
          self.column_delimiter = column_delimiter
        if header_row is not None:
          self.header_row = header_row
        if name is not None:
          self.name = name
        if unique_id_column_index is not None:
          self.unique_id_column_index = unique_id_column_index
        if upload_filename is not None:
          self.upload_filename = upload_filename

    @property
    def column_delimiter(self):
        """
        Gets the column_delimiter of this TableDefinitionCSVUpdateInputV1.
        The character used as the CSV field delimiter. The possibilities are comma, semicolon, and tab

        :return: The column_delimiter of this TableDefinitionCSVUpdateInputV1.
        :rtype: str
        """
        return self._column_delimiter

    @column_delimiter.setter
    def column_delimiter(self, column_delimiter):
        """
        Sets the column_delimiter of this TableDefinitionCSVUpdateInputV1.
        The character used as the CSV field delimiter. The possibilities are comma, semicolon, and tab

        :param column_delimiter: The column_delimiter of this TableDefinitionCSVUpdateInputV1.
        :type: str
        """
        if column_delimiter is None:
            raise ValueError("Invalid value for `column_delimiter`, must not be `None`")
        allowed_values = ["Comma", "Semicolon", "Tab"]
        if column_delimiter not in allowed_values:
            raise ValueError(
                "Invalid value for `column_delimiter` ({0}), must be one of {1}"
                .format(column_delimiter, allowed_values)
            )

        self._column_delimiter = column_delimiter

    @property
    def header_row(self):
        """
        Gets the header_row of this TableDefinitionCSVUpdateInputV1.
        Index of row with unique column headers to be used in the creation of table-definition columns. The row index is 1-based.

        :return: The header_row of this TableDefinitionCSVUpdateInputV1.
        :rtype: int
        """
        return self._header_row

    @header_row.setter
    def header_row(self, header_row):
        """
        Sets the header_row of this TableDefinitionCSVUpdateInputV1.
        Index of row with unique column headers to be used in the creation of table-definition columns. The row index is 1-based.

        :param header_row: The header_row of this TableDefinitionCSVUpdateInputV1.
        :type: int
        """
        if header_row is None:
            raise ValueError("Invalid value for `header_row`, must not be `None`")

        self._header_row = header_row

    @property
    def name(self):
        """
        Gets the name of this TableDefinitionCSVUpdateInputV1.

        :return: The name of this TableDefinitionCSVUpdateInputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TableDefinitionCSVUpdateInputV1.

        :param name: The name of this TableDefinitionCSVUpdateInputV1.
        :type: str
        """

        self._name = name

    @property
    def unique_id_column_index(self):
        """
        Gets the unique_id_column_index of this TableDefinitionCSVUpdateInputV1.
        Index of the column containing unique cell values to be used to create the primary key for each row. The column index is 1-based.

        :return: The unique_id_column_index of this TableDefinitionCSVUpdateInputV1.
        :rtype: int
        """
        return self._unique_id_column_index

    @unique_id_column_index.setter
    def unique_id_column_index(self, unique_id_column_index):
        """
        Sets the unique_id_column_index of this TableDefinitionCSVUpdateInputV1.
        Index of the column containing unique cell values to be used to create the primary key for each row. The column index is 1-based.

        :param unique_id_column_index: The unique_id_column_index of this TableDefinitionCSVUpdateInputV1.
        :type: int
        """
        if unique_id_column_index is None:
            raise ValueError("Invalid value for `unique_id_column_index`, must not be `None`")

        self._unique_id_column_index = unique_id_column_index

    @property
    def upload_filename(self):
        """
        Gets the upload_filename of this TableDefinitionCSVUpdateInputV1.
        The server-side name of the CSV file that is returned from the upload endpoint.

        :return: The upload_filename of this TableDefinitionCSVUpdateInputV1.
        :rtype: str
        """
        return self._upload_filename

    @upload_filename.setter
    def upload_filename(self, upload_filename):
        """
        Sets the upload_filename of this TableDefinitionCSVUpdateInputV1.
        The server-side name of the CSV file that is returned from the upload endpoint.

        :param upload_filename: The upload_filename of this TableDefinitionCSVUpdateInputV1.
        :type: str
        """
        if upload_filename is None:
            raise ValueError("Invalid value for `upload_filename`, must not be `None`")

        self._upload_filename = upload_filename

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TableDefinitionCSVUpdateInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
