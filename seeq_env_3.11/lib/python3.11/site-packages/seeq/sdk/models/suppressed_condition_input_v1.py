# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class SuppressedConditionInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'condition_id': 'str',
        'suppression_end_condition_id': 'str',
        'suppression_end_time': 'str',
        'suppression_start_time': 'str'
    }

    attribute_map = {
        'condition_id': 'conditionId',
        'suppression_end_condition_id': 'suppressionEndConditionId',
        'suppression_end_time': 'suppressionEndTime',
        'suppression_start_time': 'suppressionStartTime'
    }

    def __init__(self, condition_id=None, suppression_end_condition_id=None, suppression_end_time=None, suppression_start_time=None):
        """
        SuppressedConditionInputV1 - a model defined in Swagger
        """

        self._condition_id = None
        self._suppression_end_condition_id = None
        self._suppression_end_time = None
        self._suppression_start_time = None

        if condition_id is not None:
          self.condition_id = condition_id
        if suppression_end_condition_id is not None:
          self.suppression_end_condition_id = suppression_end_condition_id
        if suppression_end_time is not None:
          self.suppression_end_time = suppression_end_time
        if suppression_start_time is not None:
          self.suppression_start_time = suppression_start_time

    @property
    def condition_id(self):
        """
        Gets the condition_id of this SuppressedConditionInputV1.
        Condition ID to suppress. A condition is considered suppressed until either the provided end time is reached or the end condition produces a capsule. Suppressed conditions will not produce notifications, but will produce events, albeit with a suppressed property added to allow client applications to filter as needed.

        :return: The condition_id of this SuppressedConditionInputV1.
        :rtype: str
        """
        return self._condition_id

    @condition_id.setter
    def condition_id(self, condition_id):
        """
        Sets the condition_id of this SuppressedConditionInputV1.
        Condition ID to suppress. A condition is considered suppressed until either the provided end time is reached or the end condition produces a capsule. Suppressed conditions will not produce notifications, but will produce events, albeit with a suppressed property added to allow client applications to filter as needed.

        :param condition_id: The condition_id of this SuppressedConditionInputV1.
        :type: str
        """

        self._condition_id = condition_id

    @property
    def suppression_end_condition_id(self):
        """
        Gets the suppression_end_condition_id of this SuppressedConditionInputV1.
        Condition ID to end the suppression. One of this or suppressionEndTime must be provided

        :return: The suppression_end_condition_id of this SuppressedConditionInputV1.
        :rtype: str
        """
        return self._suppression_end_condition_id

    @suppression_end_condition_id.setter
    def suppression_end_condition_id(self, suppression_end_condition_id):
        """
        Sets the suppression_end_condition_id of this SuppressedConditionInputV1.
        Condition ID to end the suppression. One of this or suppressionEndTime must be provided

        :param suppression_end_condition_id: The suppression_end_condition_id of this SuppressedConditionInputV1.
        :type: str
        """

        self._suppression_end_condition_id = suppression_end_condition_id

    @property
    def suppression_end_time(self):
        """
        Gets the suppression_end_time of this SuppressedConditionInputV1.
        End time of the suppression as an ISO-8601 timestamp. One of this or suppressionEndCondition must be provided

        :return: The suppression_end_time of this SuppressedConditionInputV1.
        :rtype: str
        """
        return self._suppression_end_time

    @suppression_end_time.setter
    def suppression_end_time(self, suppression_end_time):
        """
        Sets the suppression_end_time of this SuppressedConditionInputV1.
        End time of the suppression as an ISO-8601 timestamp. One of this or suppressionEndCondition must be provided

        :param suppression_end_time: The suppression_end_time of this SuppressedConditionInputV1.
        :type: str
        """

        self._suppression_end_time = suppression_end_time

    @property
    def suppression_start_time(self):
        """
        Gets the suppression_start_time of this SuppressedConditionInputV1.
        Start time of the suppression as an ISO-8601 timestamp. If not provided, all new capsules found will be suppressed.

        :return: The suppression_start_time of this SuppressedConditionInputV1.
        :rtype: str
        """
        return self._suppression_start_time

    @suppression_start_time.setter
    def suppression_start_time(self, suppression_start_time):
        """
        Sets the suppression_start_time of this SuppressedConditionInputV1.
        Start time of the suppression as an ISO-8601 timestamp. If not provided, all new capsules found will be suppressed.

        :param suppression_start_time: The suppression_start_time of this SuppressedConditionInputV1.
        :type: str
        """

        self._suppression_start_time = suppression_start_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SuppressedConditionInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
