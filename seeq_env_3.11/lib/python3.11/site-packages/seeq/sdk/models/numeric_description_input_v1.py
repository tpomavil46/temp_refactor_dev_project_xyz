# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class NumericDescriptionInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'str',
        'creator_id': 'str',
        'max': 'float',
        'min': 'float',
        'name': 'str',
        'precision': 'float',
        'unit_of_measure': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'creator_id': 'creatorId',
        'max': 'max',
        'min': 'min',
        'name': 'name',
        'precision': 'precision',
        'unit_of_measure': 'unitOfMeasure',
        'updated_at': 'updatedAt'
    }

    def __init__(self, created_at=None, creator_id=None, max=None, min=None, name=None, precision=None, unit_of_measure=None, updated_at=None):
        """
        NumericDescriptionInputV1 - a model defined in Swagger
        """

        self._created_at = None
        self._creator_id = None
        self._max = None
        self._min = None
        self._name = None
        self._precision = None
        self._unit_of_measure = None
        self._updated_at = None

        if created_at is not None:
          self.created_at = created_at
        if creator_id is not None:
          self.creator_id = creator_id
        if max is not None:
          self.max = max
        if min is not None:
          self.min = min
        if name is not None:
          self.name = name
        if precision is not None:
          self.precision = precision
        if unit_of_measure is not None:
          self.unit_of_measure = unit_of_measure
        if updated_at is not None:
          self.updated_at = updated_at

    @property
    def created_at(self):
        """
        Gets the created_at of this NumericDescriptionInputV1.

        :return: The created_at of this NumericDescriptionInputV1.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this NumericDescriptionInputV1.

        :param created_at: The created_at of this NumericDescriptionInputV1.
        :type: str
        """

        self._created_at = created_at

    @property
    def creator_id(self):
        """
        Gets the creator_id of this NumericDescriptionInputV1.

        :return: The creator_id of this NumericDescriptionInputV1.
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """
        Sets the creator_id of this NumericDescriptionInputV1.

        :param creator_id: The creator_id of this NumericDescriptionInputV1.
        :type: str
        """

        self._creator_id = creator_id

    @property
    def max(self):
        """
        Gets the max of this NumericDescriptionInputV1.

        :return: The max of this NumericDescriptionInputV1.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """
        Sets the max of this NumericDescriptionInputV1.

        :param max: The max of this NumericDescriptionInputV1.
        :type: float
        """

        self._max = max

    @property
    def min(self):
        """
        Gets the min of this NumericDescriptionInputV1.

        :return: The min of this NumericDescriptionInputV1.
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """
        Sets the min of this NumericDescriptionInputV1.

        :param min: The min of this NumericDescriptionInputV1.
        :type: float
        """

        self._min = min

    @property
    def name(self):
        """
        Gets the name of this NumericDescriptionInputV1.

        :return: The name of this NumericDescriptionInputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this NumericDescriptionInputV1.

        :param name: The name of this NumericDescriptionInputV1.
        :type: str
        """

        self._name = name

    @property
    def precision(self):
        """
        Gets the precision of this NumericDescriptionInputV1.

        :return: The precision of this NumericDescriptionInputV1.
        :rtype: float
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """
        Sets the precision of this NumericDescriptionInputV1.

        :param precision: The precision of this NumericDescriptionInputV1.
        :type: float
        """

        self._precision = precision

    @property
    def unit_of_measure(self):
        """
        Gets the unit_of_measure of this NumericDescriptionInputV1.

        :return: The unit_of_measure of this NumericDescriptionInputV1.
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """
        Sets the unit_of_measure of this NumericDescriptionInputV1.

        :param unit_of_measure: The unit_of_measure of this NumericDescriptionInputV1.
        :type: str
        """

        self._unit_of_measure = unit_of_measure

    @property
    def updated_at(self):
        """
        Gets the updated_at of this NumericDescriptionInputV1.

        :return: The updated_at of this NumericDescriptionInputV1.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this NumericDescriptionInputV1.

        :param updated_at: The updated_at of this NumericDescriptionInputV1.
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NumericDescriptionInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
