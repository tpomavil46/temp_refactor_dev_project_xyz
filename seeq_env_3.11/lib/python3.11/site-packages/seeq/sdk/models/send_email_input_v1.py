# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class SendEmailInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'to_emails': 'list[SendEmailContactV1]',
        'cc_emails': 'list[SendEmailContactV1]',
        'bcc_emails': 'list[SendEmailContactV1]',
        'subject': 'str',
        'content': 'str',
        'attachments': 'list[SendEmailAttachmentV1]'
    }

    attribute_map = {
        'to_emails': 'toEmails',
        'cc_emails': 'ccEmails',
        'bcc_emails': 'bccEmails',
        'subject': 'subject',
        'content': 'content',
        'attachments': 'attachments'
    }

    def __init__(self, to_emails=None, cc_emails=None, bcc_emails=None, subject=None, content=None, attachments=None):
        """
        SendEmailInputV1 - a model defined in Swagger
        """

        self._to_emails = None
        self._cc_emails = None
        self._bcc_emails = None
        self._subject = None
        self._content = None
        self._attachments = None

        if to_emails is not None:
          self.to_emails = to_emails
        if cc_emails is not None:
          self.cc_emails = cc_emails
        if bcc_emails is not None:
          self.bcc_emails = bcc_emails
        if subject is not None:
          self.subject = subject
        if content is not None:
          self.content = content
        if attachments is not None:
          self.attachments = attachments

    @property
    def to_emails(self):
        """
        Gets the to_emails of this SendEmailInputV1.
        List of email recipients to use in the TO attribute of the email.

        :return: The to_emails of this SendEmailInputV1.
        :rtype: list[SendEmailContactV1]
        """
        return self._to_emails

    @to_emails.setter
    def to_emails(self, to_emails):
        """
        Sets the to_emails of this SendEmailInputV1.
        List of email recipients to use in the TO attribute of the email.

        :param to_emails: The to_emails of this SendEmailInputV1.
        :type: list[SendEmailContactV1]
        """
        if to_emails is None:
            raise ValueError("Invalid value for `to_emails`, must not be `None`")

        self._to_emails = to_emails

    @property
    def cc_emails(self):
        """
        Gets the cc_emails of this SendEmailInputV1.
        List of email recipients to use in the CC attribute of the email.

        :return: The cc_emails of this SendEmailInputV1.
        :rtype: list[SendEmailContactV1]
        """
        return self._cc_emails

    @cc_emails.setter
    def cc_emails(self, cc_emails):
        """
        Sets the cc_emails of this SendEmailInputV1.
        List of email recipients to use in the CC attribute of the email.

        :param cc_emails: The cc_emails of this SendEmailInputV1.
        :type: list[SendEmailContactV1]
        """
        if cc_emails is None:
            raise ValueError("Invalid value for `cc_emails`, must not be `None`")

        self._cc_emails = cc_emails

    @property
    def bcc_emails(self):
        """
        Gets the bcc_emails of this SendEmailInputV1.
        List of email recipients to use in the BCC attribute of the email.

        :return: The bcc_emails of this SendEmailInputV1.
        :rtype: list[SendEmailContactV1]
        """
        return self._bcc_emails

    @bcc_emails.setter
    def bcc_emails(self, bcc_emails):
        """
        Sets the bcc_emails of this SendEmailInputV1.
        List of email recipients to use in the BCC attribute of the email.

        :param bcc_emails: The bcc_emails of this SendEmailInputV1.
        :type: list[SendEmailContactV1]
        """
        if bcc_emails is None:
            raise ValueError("Invalid value for `bcc_emails`, must not be `None`")

        self._bcc_emails = bcc_emails

    @property
    def subject(self):
        """
        Gets the subject of this SendEmailInputV1.
        Subject of the email.

        :return: The subject of this SendEmailInputV1.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this SendEmailInputV1.
        Subject of the email.

        :param subject: The subject of this SendEmailInputV1.
        :type: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def content(self):
        """
        Gets the content of this SendEmailInputV1.
        HTML body of the email.

        :return: The content of this SendEmailInputV1.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this SendEmailInputV1.
        HTML body of the email.

        :param content: The content of this SendEmailInputV1.
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def attachments(self):
        """
        Gets the attachments of this SendEmailInputV1.
        List of attachments for the email.

        :return: The attachments of this SendEmailInputV1.
        :rtype: list[SendEmailAttachmentV1]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """
        Sets the attachments of this SendEmailInputV1.
        List of attachments for the email.

        :param attachments: The attachments of this SendEmailInputV1.
        :type: list[SendEmailAttachmentV1]
        """
        if attachments is None:
            raise ValueError("Invalid value for `attachments`, must not be `None`")

        self._attachments = attachments

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SendEmailInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
