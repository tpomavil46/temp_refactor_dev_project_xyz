# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class PreProvisionInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_name': 'str',
        'machine_name': 'str',
        're_provisioning_allowed': 'bool',
        'source_address': 'str'
    }

    attribute_map = {
        'agent_name': 'agentName',
        'machine_name': 'machineName',
        're_provisioning_allowed': 'reProvisioningAllowed',
        'source_address': 'sourceAddress'
    }

    def __init__(self, agent_name=None, machine_name=None, re_provisioning_allowed=False, source_address=None):
        """
        PreProvisionInputV1 - a model defined in Swagger
        """

        self._agent_name = None
        self._machine_name = None
        self._re_provisioning_allowed = None
        self._source_address = None

        if agent_name is not None:
          self.agent_name = agent_name
        if machine_name is not None:
          self.machine_name = machine_name
        if re_provisioning_allowed is not None:
          self.re_provisioning_allowed = re_provisioning_allowed
        if source_address is not None:
          self.source_address = source_address

    @property
    def agent_name(self):
        """
        Gets the agent_name of this PreProvisionInputV1.
        The name of the agent. This is needed to be able to differentiate the agents in side-by-side installations.

        :return: The agent_name of this PreProvisionInputV1.
        :rtype: str
        """
        return self._agent_name

    @agent_name.setter
    def agent_name(self, agent_name):
        """
        Sets the agent_name of this PreProvisionInputV1.
        The name of the agent. This is needed to be able to differentiate the agents in side-by-side installations.

        :param agent_name: The agent_name of this PreProvisionInputV1.
        :type: str
        """

        self._agent_name = agent_name

    @property
    def machine_name(self):
        """
        Gets the machine_name of this PreProvisionInputV1.
        The name of the machine where the agent will run.

        :return: The machine_name of this PreProvisionInputV1.
        :rtype: str
        """
        return self._machine_name

    @machine_name.setter
    def machine_name(self, machine_name):
        """
        Sets the machine_name of this PreProvisionInputV1.
        The name of the machine where the agent will run.

        :param machine_name: The machine_name of this PreProvisionInputV1.
        :type: str
        """
        if machine_name is None:
            raise ValueError("Invalid value for `machine_name`, must not be `None`")

        self._machine_name = machine_name

    @property
    def re_provisioning_allowed(self):
        """
        Gets the re_provisioning_allowed of this PreProvisionInputV1.
        true if re-provisioning is desired even if the user is already provisioned

        :return: The re_provisioning_allowed of this PreProvisionInputV1.
        :rtype: bool
        """
        return self._re_provisioning_allowed

    @re_provisioning_allowed.setter
    def re_provisioning_allowed(self, re_provisioning_allowed):
        """
        Sets the re_provisioning_allowed of this PreProvisionInputV1.
        true if re-provisioning is desired even if the user is already provisioned

        :param re_provisioning_allowed: The re_provisioning_allowed of this PreProvisionInputV1.
        :type: bool
        """

        self._re_provisioning_allowed = re_provisioning_allowed

    @property
    def source_address(self):
        """
        Gets the source_address of this PreProvisionInputV1.
        The source IP or CIDR range from where the agent would connect.

        :return: The source_address of this PreProvisionInputV1.
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """
        Sets the source_address of this PreProvisionInputV1.
        The source IP or CIDR range from where the agent would connect.

        :param source_address: The source_address of this PreProvisionInputV1.
        :type: str
        """

        self._source_address = source_address

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PreProvisionInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
