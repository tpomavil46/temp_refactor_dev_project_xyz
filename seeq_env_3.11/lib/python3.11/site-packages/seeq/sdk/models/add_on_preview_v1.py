# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class AddOnPreviewV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_on_identifier': 'str',
        'effective_permissions': 'PermissionsV1',
        'id': 'str',
        'in_development': 'bool',
        'installer': 'IdentityPreviewV1'
    }

    attribute_map = {
        'add_on_identifier': 'addOnIdentifier',
        'effective_permissions': 'effectivePermissions',
        'id': 'id',
        'in_development': 'inDevelopment',
        'installer': 'installer'
    }

    def __init__(self, add_on_identifier=None, effective_permissions=None, id=None, in_development=None, installer=None):
        """
        AddOnPreviewV1 - a model defined in Swagger
        """

        self._add_on_identifier = None
        self._effective_permissions = None
        self._id = None
        self._in_development = None
        self._installer = None

        if add_on_identifier is not None:
          self.add_on_identifier = add_on_identifier
        if effective_permissions is not None:
          self.effective_permissions = effective_permissions
        if id is not None:
          self.id = id
        if in_development is not None:
          self.in_development = in_development
        if installer is not None:
          self.installer = installer

    @property
    def add_on_identifier(self):
        """
        Gets the add_on_identifier of this AddOnPreviewV1.
        The unique identifier associated with this Add-on, shared across all Seeq server instances.

        :return: The add_on_identifier of this AddOnPreviewV1.
        :rtype: str
        """
        return self._add_on_identifier

    @add_on_identifier.setter
    def add_on_identifier(self, add_on_identifier):
        """
        Sets the add_on_identifier of this AddOnPreviewV1.
        The unique identifier associated with this Add-on, shared across all Seeq server instances.

        :param add_on_identifier: The add_on_identifier of this AddOnPreviewV1.
        :type: str
        """

        self._add_on_identifier = add_on_identifier

    @property
    def effective_permissions(self):
        """
        Gets the effective_permissions of this AddOnPreviewV1.

        :return: The effective_permissions of this AddOnPreviewV1.
        :rtype: PermissionsV1
        """
        return self._effective_permissions

    @effective_permissions.setter
    def effective_permissions(self, effective_permissions):
        """
        Sets the effective_permissions of this AddOnPreviewV1.

        :param effective_permissions: The effective_permissions of this AddOnPreviewV1.
        :type: PermissionsV1
        """

        self._effective_permissions = effective_permissions

    @property
    def id(self):
        """
        Gets the id of this AddOnPreviewV1.
        The ID that can be used to interact with the item.

        :return: The id of this AddOnPreviewV1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AddOnPreviewV1.
        The ID that can be used to interact with the item.

        :param id: The id of this AddOnPreviewV1.
        :type: str
        """

        self._id = id

    @property
    def in_development(self):
        """
        Gets the in_development of this AddOnPreviewV1.
        Whether this item is in Development Mode.

        :return: The in_development of this AddOnPreviewV1.
        :rtype: bool
        """
        return self._in_development

    @in_development.setter
    def in_development(self, in_development):
        """
        Sets the in_development of this AddOnPreviewV1.
        Whether this item is in Development Mode.

        :param in_development: The in_development of this AddOnPreviewV1.
        :type: bool
        """

        self._in_development = in_development

    @property
    def installer(self):
        """
        Gets the installer of this AddOnPreviewV1.

        :return: The installer of this AddOnPreviewV1.
        :rtype: IdentityPreviewV1
        """
        return self._installer

    @installer.setter
    def installer(self, installer):
        """
        Sets the installer of this AddOnPreviewV1.

        :param installer: The installer of this AddOnPreviewV1.
        :type: IdentityPreviewV1
        """

        self._installer = installer

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AddOnPreviewV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
