# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ValidateCronListInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'next_valid_time_after': 'str',
        'schedules': 'list[str]',
        'timezone': 'str'
    }

    attribute_map = {
        'next_valid_time_after': 'nextValidTimeAfter',
        'schedules': 'schedules',
        'timezone': 'timezone'
    }

    def __init__(self, next_valid_time_after=None, schedules=None, timezone=None):
        """
        ValidateCronListInputV1 - a model defined in Swagger
        """

        self._next_valid_time_after = None
        self._schedules = None
        self._timezone = None

        if next_valid_time_after is not None:
          self.next_valid_time_after = next_valid_time_after
        if schedules is not None:
          self.schedules = schedules
        if timezone is not None:
          self.timezone = timezone

    @property
    def next_valid_time_after(self):
        """
        Gets the next_valid_time_after of this ValidateCronListInputV1.
        The time used to evaluate the next run time. Defaults to the current datetime

        :return: The next_valid_time_after of this ValidateCronListInputV1.
        :rtype: str
        """
        return self._next_valid_time_after

    @next_valid_time_after.setter
    def next_valid_time_after(self, next_valid_time_after):
        """
        Sets the next_valid_time_after of this ValidateCronListInputV1.
        The time used to evaluate the next run time. Defaults to the current datetime

        :param next_valid_time_after: The next_valid_time_after of this ValidateCronListInputV1.
        :type: str
        """

        self._next_valid_time_after = next_valid_time_after

    @property
    def schedules(self):
        """
        Gets the schedules of this ValidateCronListInputV1.
        The list of Quartz cron expressions to validate (see http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html)

        :return: The schedules of this ValidateCronListInputV1.
        :rtype: list[str]
        """
        return self._schedules

    @schedules.setter
    def schedules(self, schedules):
        """
        Sets the schedules of this ValidateCronListInputV1.
        The list of Quartz cron expressions to validate (see http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html)

        :param schedules: The schedules of this ValidateCronListInputV1.
        :type: list[str]
        """
        if schedules is None:
            raise ValueError("Invalid value for `schedules`, must not be `None`")

        self._schedules = schedules

    @property
    def timezone(self):
        """
        Gets the timezone of this ValidateCronListInputV1.
        The timezone in which to do the time evaluation. Defaults to UTC

        :return: The timezone of this ValidateCronListInputV1.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this ValidateCronListInputV1.
        The timezone in which to do the time evaluation. Defaults to UTC

        :param timezone: The timezone of this ValidateCronListInputV1.
        :type: str
        """

        self._timezone = timezone

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ValidateCronListInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
