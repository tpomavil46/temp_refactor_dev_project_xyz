# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ColumnRuleAncestorInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_index': 'int',
        'level': 'int'
    }

    attribute_map = {
        'column_index': 'columnIndex',
        'level': 'level'
    }

    def __init__(self, column_index=None, level=None):
        """
        ColumnRuleAncestorInputV1 - a model defined in Swagger
        """

        self._column_index = None
        self._level = None

        if column_index is not None:
          self.column_index = column_index
        if level is not None:
          self.level = level

    @property
    def column_index(self):
        """
        Gets the column_index of this ColumnRuleAncestorInputV1.
        The index of the column that references the item. The column index is 1-based

        :return: The column_index of this ColumnRuleAncestorInputV1.
        :rtype: int
        """
        return self._column_index

    @column_index.setter
    def column_index(self, column_index):
        """
        Sets the column_index of this ColumnRuleAncestorInputV1.
        The index of the column that references the item. The column index is 1-based

        :param column_index: The column_index of this ColumnRuleAncestorInputV1.
        :type: int
        """
        if column_index is None:
            raise ValueError("Invalid value for `column_index`, must not be `None`")

        self._column_index = column_index

    @property
    def level(self):
        """
        Gets the level of this ColumnRuleAncestorInputV1.
        The number of levels to go up in the tree. Must be >= 1. For example, if columnIndex                  references a Condition ID and level is 1 then the rule would return the UUID of the asset to                  which the condition belongs

        :return: The level of this ColumnRuleAncestorInputV1.
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """
        Sets the level of this ColumnRuleAncestorInputV1.
        The number of levels to go up in the tree. Must be >= 1. For example, if columnIndex                  references a Condition ID and level is 1 then the rule would return the UUID of the asset to                  which the condition belongs

        :param level: The level of this ColumnRuleAncestorInputV1.
        :type: int
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")

        self._level = level

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ColumnRuleAncestorInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
