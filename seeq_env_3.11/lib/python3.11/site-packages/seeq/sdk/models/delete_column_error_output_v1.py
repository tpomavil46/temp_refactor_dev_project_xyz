# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.4.0-v202412241102-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class DeleteColumnErrorOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_dependent_names': 'list[str]',
        'error_type': 'str',
        'status_message': 'str'
    }

    attribute_map = {
        'column_dependent_names': 'columnDependentNames',
        'error_type': 'errorType',
        'status_message': 'statusMessage'
    }

    def __init__(self, column_dependent_names=None, error_type=None, status_message=None):
        """
        DeleteColumnErrorOutputV1 - a model defined in Swagger
        """

        self._column_dependent_names = None
        self._error_type = None
        self._status_message = None

        if column_dependent_names is not None:
          self.column_dependent_names = column_dependent_names
        if error_type is not None:
          self.error_type = error_type
        if status_message is not None:
          self.status_message = status_message

    @property
    def column_dependent_names(self):
        """
        Gets the column_dependent_names of this DeleteColumnErrorOutputV1.
        The column names that are dependent on the column being deleted

        :return: The column_dependent_names of this DeleteColumnErrorOutputV1.
        :rtype: list[str]
        """
        return self._column_dependent_names

    @column_dependent_names.setter
    def column_dependent_names(self, column_dependent_names):
        """
        Sets the column_dependent_names of this DeleteColumnErrorOutputV1.
        The column names that are dependent on the column being deleted

        :param column_dependent_names: The column_dependent_names of this DeleteColumnErrorOutputV1.
        :type: list[str]
        """
        if column_dependent_names is None:
            raise ValueError("Invalid value for `column_dependent_names`, must not be `None`")

        self._column_dependent_names = column_dependent_names

    @property
    def error_type(self):
        """
        Gets the error_type of this DeleteColumnErrorOutputV1.
        The type of delete column error that occurred

        :return: The error_type of this DeleteColumnErrorOutputV1.
        :rtype: str
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """
        Sets the error_type of this DeleteColumnErrorOutputV1.
        The type of delete column error that occurred

        :param error_type: The error_type of this DeleteColumnErrorOutputV1.
        :type: str
        """
        if error_type is None:
            raise ValueError("Invalid value for `error_type`, must not be `None`")
        allowed_values = ["COLUMN_HAS_DEPENDENTS", "COLUMN_HAS_OVERRIDE", "GENERIC_ERROR"]
        if error_type not in allowed_values:
            raise ValueError(
                "Invalid value for `error_type` ({0}), must be one of {1}"
                .format(error_type, allowed_values)
            )

        self._error_type = error_type

    @property
    def status_message(self):
        """
        Gets the status_message of this DeleteColumnErrorOutputV1.
        A plain language status message with information about any issues that may have been encountered during an operation. Null if the status message has not been set.

        :return: The status_message of this DeleteColumnErrorOutputV1.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """
        Sets the status_message of this DeleteColumnErrorOutputV1.
        A plain language status message with information about any issues that may have been encountered during an operation. Null if the status message has not been set.

        :param status_message: The status_message of this DeleteColumnErrorOutputV1.
        :type: str
        """

        self._status_message = status_message

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeleteColumnErrorOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
